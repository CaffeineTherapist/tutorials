package cascading.legstar.cobolcopybook.beans.bean8.bind;

import cascading.legstar.cobolcopybook.beans.bean8.Kcp02V05AccountStatusData;
import cascading.legstar.cobolcopybook.beans.bean8.Kcp02V05Dormancy;
import cascading.legstar.cobolcopybook.beans.bean8.ObjectFactory;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.ICobolZonedDecimalBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * LegStar Binding for Complex element :
 * Kcp02V05AccountStatusData.
 * <p/>
 * This class was generated by LegStar Binding generator.
 */
public class Kcp02V05AccountStatusDataBinding extends CComplexBinding
  {

  /**
   * Maximum host bytes size for this complex object.
   */
  private static final int BYTE_LENGTH = 76;
  /**
   * Binding factory.
   */
  private static final ICobolBindingFactory BF = CobolBindingFactory.getBindingFactory();
  /**
   * Static reference to Value object factory to be used as default.
   */
  private static final ObjectFactory JF = new ObjectFactory();
  /**
   * Current Value object factory (Defaults to the static one but can be
   * changed).
   */
  private ObjectFactory mValueObjectFactory = JF;
  /**
   * Logger.
   */
  private final Log _log = LogFactory.getLog( getClass() );
  /**
   * Child bound to value object property Kcp02V05Status(Short).
   */
  public ICobolPackedDecimalBinding _kcp02V05Status;
  /**
   * Child bound to value object property Kcp02V05Opdate(String).
   */
  public ICobolStringBinding _kcp02V05Opdate;
  /**
   * Child bound to value object property Kcp02V05Cldate(String).
   */
  public ICobolStringBinding _kcp02V05Cldate;
  /**
   * Child bound to value object property Kcp02V05Chdate(String).
   */
  public ICobolStringBinding _kcp02V05Chdate;
  /**
   * Child bound to value object property Kcp02V05ReopenDate(String).
   */
  public ICobolStringBinding _kcp02V05ReopenDate;
  /**
   * Child bound to value object property Kcp02V05TransferDate(String).
   */
  public ICobolStringBinding _kcp02V05TransferDate;
  /**
   * Child bound to value object property Kcp02V05BadDoubt(Short).
   */
  public ICobolPackedDecimalBinding _kcp02V05BadDoubt;
  /**
   * Child bound to value object property Kcp02V05OpenPrimeRc(Short).
   */
  public ICobolPackedDecimalBinding _kcp02V05OpenPrimeRc;
  /**
   * Child bound to value object property Kcp02V05OpenSupplemRc(Short).
   */
  public ICobolPackedDecimalBinding _kcp02V05OpenSupplemRc;
  /**
   * Child bound to value object property Kcp02V05FromFinInstRef(Integer).
   */
  public ICobolPackedDecimalBinding _kcp02V05FromFinInstRef;
  /**
   * Child bound to value object property Kcp02V05FromFinInstScode(Long).
   */
  public ICobolZonedDecimalBinding _kcp02V05FromFinInstScode;
  /**
   * Child bound to value object property Kcp02V05ClosePrimeRc(Short).
   */
  public ICobolPackedDecimalBinding _kcp02V05ClosePrimeRc;
  /**
   * Child bound to value object property Kcp02V05CloseSupplemRc(Short).
   */
  public ICobolPackedDecimalBinding _kcp02V05CloseSupplemRc;
  /**
   * Child bound to value object property Kcp02V05ToFinInstRef(Integer).
   */
  public ICobolPackedDecimalBinding _kcp02V05ToFinInstRef;
  /**
   * Child bound to value object property Kcp02V05ToFinInstSortCode(Long).
   */
  public ICobolZonedDecimalBinding _kcp02V05ToFinInstSortCode;
  /**
   * Child bound to value object property Kcp02V05TransferToSortCode(Long).
   */
  public ICobolZonedDecimalBinding _kcp02V05TransferToSortCode;
  /**
   * Child bound to value object property Kcp02V05TransfrToAccNumber(Long).
   */
  public ICobolZonedDecimalBinding _kcp02V05TransfrToAccNumber;
  /**
   * Child bound to value object property Kcp02V05TransfFromSortCode(Long).
   */
  public ICobolZonedDecimalBinding _kcp02V05TransfFromSortCode;
  /**
   * Child bound to value object property Kcp02V05TransferFromAccNum(Long).
   */
  public ICobolZonedDecimalBinding _kcp02V05TransferFromAccNum;
  /**
   * Child bound to value object property Kcp02V05NewChangeDate(String).
   */
  public ICobolStringBinding _kcp02V05NewChangeDate;
  /**
   * Child bound to value object property Kcp02V05OldChangeDate(String).
   */
  public ICobolStringBinding _kcp02V05OldChangeDate;
  /**
   * Child bound to value object property Kcp02V05MergeIndicator(String).
   */
  public ICobolStringBinding _kcp02V05MergeIndicator;
  /**
   * Child bound to value object property Kcp02V05Dormancy(Kcp02V05Dormancy).
   */
  public ICobolComplexBinding _kcp02V05Dormancy;
  /**
   * Value object to which this cobol complex element is bound.
   */
  private Kcp02V05AccountStatusData mValueObject;
  /**
   * Indicates that the associated Value object just came from the constructor
   * and doesn't need to be recreated.
   */
  private boolean mUnusedValueObject = false;

  /**
   * Constructor for a root Complex element without a bound Value object.
   */
  public Kcp02V05AccountStatusDataBinding()
    {
    this( null );
    }

  /**
   * Constructor for a root Complex element with a bound Value object.
   *
   * @param valueObject the concrete Value object instance bound to this
   *                    complex element
   */
  public Kcp02V05AccountStatusDataBinding( final Kcp02V05AccountStatusData valueObject )
    {
    this( "", "", null, valueObject );
    }

  /**
   * Constructor for a Complex element as a child of another element and
   * an associated Value object.
   *
   * @param bindingName   the identifier for this binding
   * @param fieldName     field name in parent Value object
   * @param valueObject   the concrete Value object instance bound to this
   *                      complex element
   * @param parentBinding a reference to the parent binding
   */
  public Kcp02V05AccountStatusDataBinding( final String bindingName, final String fieldName, final ICobolComplexBinding parentBinding, final Kcp02V05AccountStatusData valueObject )
    {

    super( bindingName, fieldName, Kcp02V05AccountStatusData.class, null, parentBinding );
    mValueObject = valueObject;
    if( mValueObject != null )
      {
      mUnusedValueObject = true;
      }
    initChildren();
    setByteLength( BYTE_LENGTH );
    }

  /**
   * Creates a binding property for each child.
   */
  private void initChildren()
    {
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing started" );
      }
        /* Create binding children instances */

    _kcp02V05Status = BF.createPackedDecimalBinding( "Kcp02V05Status", "Kcp02V05Status", Short.class, this );
    _kcp02V05Status.setCobolName( "KCP02V05-STATUS" );
    _kcp02V05Status.setByteLength( 1 );
    _kcp02V05Status.setTotalDigits( 1 );
    _kcp02V05Status.setIsSigned( true );
    _kcp02V05Opdate = BF.createStringBinding( "Kcp02V05Opdate", "Kcp02V05Opdate", String.class, this );
    _kcp02V05Opdate.setCobolName( "KCP02V05-OPDATE" );
    _kcp02V05Opdate.setByteLength( 2 );
    _kcp02V05Cldate = BF.createStringBinding( "Kcp02V05Cldate", "Kcp02V05Cldate", String.class, this );
    _kcp02V05Cldate.setCobolName( "KCP02V05-CLDATE" );
    _kcp02V05Cldate.setByteLength( 2 );
    _kcp02V05Chdate = BF.createStringBinding( "Kcp02V05Chdate", "Kcp02V05Chdate", String.class, this );
    _kcp02V05Chdate.setCobolName( "KCP02V05-CHDATE" );
    _kcp02V05Chdate.setByteLength( 2 );
    _kcp02V05ReopenDate = BF.createStringBinding( "Kcp02V05ReopenDate", "Kcp02V05ReopenDate", String.class, this );
    _kcp02V05ReopenDate.setCobolName( "KCP02V05-REOPEN-DATE" );
    _kcp02V05ReopenDate.setByteLength( 2 );
    _kcp02V05TransferDate = BF.createStringBinding( "Kcp02V05TransferDate", "Kcp02V05TransferDate", String.class, this );
    _kcp02V05TransferDate.setCobolName( "KCP02V05-TRANSFER-DATE" );
    _kcp02V05TransferDate.setByteLength( 2 );
    _kcp02V05BadDoubt = BF.createPackedDecimalBinding( "Kcp02V05BadDoubt", "Kcp02V05BadDoubt", Short.class, this );
    _kcp02V05BadDoubt.setCobolName( "KCP02V05-BAD-DOUBT" );
    _kcp02V05BadDoubt.setByteLength( 1 );
    _kcp02V05BadDoubt.setTotalDigits( 1 );
    _kcp02V05BadDoubt.setIsSigned( true );
    _kcp02V05OpenPrimeRc = BF.createPackedDecimalBinding( "Kcp02V05OpenPrimeRc", "Kcp02V05OpenPrimeRc", Short.class, this );
    _kcp02V05OpenPrimeRc.setCobolName( "KCP02V05-OPEN-PRIME-RC" );
    _kcp02V05OpenPrimeRc.setByteLength( 2 );
    _kcp02V05OpenPrimeRc.setTotalDigits( 3 );
    _kcp02V05OpenPrimeRc.setIsSigned( true );
    _kcp02V05OpenSupplemRc = BF.createPackedDecimalBinding( "Kcp02V05OpenSupplemRc", "Kcp02V05OpenSupplemRc", Short.class, this );
    _kcp02V05OpenSupplemRc.setCobolName( "KCP02V05-OPEN-SUPPLEM-RC" );
    _kcp02V05OpenSupplemRc.setByteLength( 2 );
    _kcp02V05OpenSupplemRc.setTotalDigits( 3 );
    _kcp02V05OpenSupplemRc.setIsSigned( true );
    _kcp02V05FromFinInstRef = BF.createPackedDecimalBinding( "Kcp02V05FromFinInstRef", "Kcp02V05FromFinInstRef", Integer.class, this );
    _kcp02V05FromFinInstRef.setCobolName( "KCP02V05-FROM-FIN-INST-REF" );
    _kcp02V05FromFinInstRef.setByteLength( 4 );
    _kcp02V05FromFinInstRef.setTotalDigits( 7 );
    _kcp02V05FromFinInstRef.setIsSigned( true );
    _kcp02V05FromFinInstScode = BF.createZonedDecimalBinding( "Kcp02V05FromFinInstScode", "Kcp02V05FromFinInstScode", Long.class, this );
    _kcp02V05FromFinInstScode.setCobolName( "KCP02V05-FROM-FIN-INST-SCODE" );
    _kcp02V05FromFinInstScode.setByteLength( 6 );
    _kcp02V05FromFinInstScode.setTotalDigits( 6 );
    _kcp02V05ClosePrimeRc = BF.createPackedDecimalBinding( "Kcp02V05ClosePrimeRc", "Kcp02V05ClosePrimeRc", Short.class, this );
    _kcp02V05ClosePrimeRc.setCobolName( "KCP02V05-CLOSE-PRIME-RC" );
    _kcp02V05ClosePrimeRc.setByteLength( 2 );
    _kcp02V05ClosePrimeRc.setTotalDigits( 3 );
    _kcp02V05ClosePrimeRc.setIsSigned( true );
    _kcp02V05CloseSupplemRc = BF.createPackedDecimalBinding( "Kcp02V05CloseSupplemRc", "Kcp02V05CloseSupplemRc", Short.class, this );
    _kcp02V05CloseSupplemRc.setCobolName( "KCP02V05-CLOSE-SUPPLEM-RC" );
    _kcp02V05CloseSupplemRc.setByteLength( 2 );
    _kcp02V05CloseSupplemRc.setTotalDigits( 3 );
    _kcp02V05CloseSupplemRc.setIsSigned( true );
    _kcp02V05ToFinInstRef = BF.createPackedDecimalBinding( "Kcp02V05ToFinInstRef", "Kcp02V05ToFinInstRef", Integer.class, this );
    _kcp02V05ToFinInstRef.setCobolName( "KCP02V05-TO-FIN-INST-REF" );
    _kcp02V05ToFinInstRef.setByteLength( 4 );
    _kcp02V05ToFinInstRef.setTotalDigits( 7 );
    _kcp02V05ToFinInstRef.setIsSigned( true );
    _kcp02V05ToFinInstSortCode = BF.createZonedDecimalBinding( "Kcp02V05ToFinInstSortCode", "Kcp02V05ToFinInstSortCode", Long.class, this );
    _kcp02V05ToFinInstSortCode.setCobolName( "KCP02V05-TO-FIN-INST-SORT-CODE" );
    _kcp02V05ToFinInstSortCode.setByteLength( 6 );
    _kcp02V05ToFinInstSortCode.setTotalDigits( 6 );
    _kcp02V05TransferToSortCode = BF.createZonedDecimalBinding( "Kcp02V05TransferToSortCode", "Kcp02V05TransferToSortCode", Long.class, this );
    _kcp02V05TransferToSortCode.setCobolName( "KCP02V05-TRANSFER-TO-SORT-CODE" );
    _kcp02V05TransferToSortCode.setByteLength( 6 );
    _kcp02V05TransferToSortCode.setTotalDigits( 6 );
    _kcp02V05TransfrToAccNumber = BF.createZonedDecimalBinding( "Kcp02V05TransfrToAccNumber", "Kcp02V05TransfrToAccNumber", Long.class, this );
    _kcp02V05TransfrToAccNumber.setCobolName( "KCP02V05-TRANSFR-TO-ACC-NUMBER" );
    _kcp02V05TransfrToAccNumber.setByteLength( 8 );
    _kcp02V05TransfrToAccNumber.setTotalDigits( 8 );
    _kcp02V05TransfFromSortCode = BF.createZonedDecimalBinding( "Kcp02V05TransfFromSortCode", "Kcp02V05TransfFromSortCode", Long.class, this );
    _kcp02V05TransfFromSortCode.setCobolName( "KCP02V05-TRANSF-FROM-SORT-CODE" );
    _kcp02V05TransfFromSortCode.setByteLength( 6 );
    _kcp02V05TransfFromSortCode.setTotalDigits( 6 );
    _kcp02V05TransferFromAccNum = BF.createZonedDecimalBinding( "Kcp02V05TransferFromAccNum", "Kcp02V05TransferFromAccNum", Long.class, this );
    _kcp02V05TransferFromAccNum.setCobolName( "KCP02V05-TRANSFER-FROM-ACC-NUM" );
    _kcp02V05TransferFromAccNum.setByteLength( 8 );
    _kcp02V05TransferFromAccNum.setTotalDigits( 8 );
    _kcp02V05NewChangeDate = BF.createStringBinding( "Kcp02V05NewChangeDate", "Kcp02V05NewChangeDate", String.class, this );
    _kcp02V05NewChangeDate.setCobolName( "KCP02V05-NEW-CHANGE-DATE" );
    _kcp02V05NewChangeDate.setByteLength( 2 );
    _kcp02V05OldChangeDate = BF.createStringBinding( "Kcp02V05OldChangeDate", "Kcp02V05OldChangeDate", String.class, this );
    _kcp02V05OldChangeDate.setCobolName( "KCP02V05-OLD-CHANGE-DATE" );
    _kcp02V05OldChangeDate.setByteLength( 2 );
    _kcp02V05MergeIndicator = BF.createStringBinding( "Kcp02V05MergeIndicator", "Kcp02V05MergeIndicator", String.class, this );
    _kcp02V05MergeIndicator.setCobolName( "KCP02V05-MERGE-INDICATOR" );
    _kcp02V05MergeIndicator.setByteLength( 1 );
    _kcp02V05Dormancy = new Kcp02V05DormancyBinding( "Kcp02V05Dormancy", "Kcp02V05Dormancy", this, null );
    _kcp02V05Dormancy.setCobolName( "KCP02V05-DORMANCY" );
    _kcp02V05Dormancy.setByteLength( 3 );

        /* Add children to children list */
    getChildrenList().add( _kcp02V05Status );
    getChildrenList().add( _kcp02V05Opdate );
    getChildrenList().add( _kcp02V05Cldate );
    getChildrenList().add( _kcp02V05Chdate );
    getChildrenList().add( _kcp02V05ReopenDate );
    getChildrenList().add( _kcp02V05TransferDate );
    getChildrenList().add( _kcp02V05BadDoubt );
    getChildrenList().add( _kcp02V05OpenPrimeRc );
    getChildrenList().add( _kcp02V05OpenSupplemRc );
    getChildrenList().add( _kcp02V05FromFinInstRef );
    getChildrenList().add( _kcp02V05FromFinInstScode );
    getChildrenList().add( _kcp02V05ClosePrimeRc );
    getChildrenList().add( _kcp02V05CloseSupplemRc );
    getChildrenList().add( _kcp02V05ToFinInstRef );
    getChildrenList().add( _kcp02V05ToFinInstSortCode );
    getChildrenList().add( _kcp02V05TransferToSortCode );
    getChildrenList().add( _kcp02V05TransfrToAccNumber );
    getChildrenList().add( _kcp02V05TransfFromSortCode );
    getChildrenList().add( _kcp02V05TransferFromAccNum );
    getChildrenList().add( _kcp02V05NewChangeDate );
    getChildrenList().add( _kcp02V05OldChangeDate );
    getChildrenList().add( _kcp02V05MergeIndicator );
    getChildrenList().add( _kcp02V05Dormancy );

    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing successful" );
      }
    }

  /**
   * {@inheritDoc}
   */
  public void createValueObject() throws HostException
    {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
    if( mUnusedValueObject && mValueObject != null )
      {
      mUnusedValueObject = false;
      return;
      }
    mValueObject = mValueObjectFactory.createKcp02V05AccountStatusData();
    }

  /**
   * {@inheritDoc}
   */
  public void setChildrenValues() throws HostException
    {

         /* Make sure there is an associated Value object*/
    if( mValueObject == null )
      {
      createValueObject();
      }
        /* Get Value object property _kcp02V05Status */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05Status" + " value=" + mValueObject.getKcp02V05Status() );
      }
    _kcp02V05Status.setObjectValue( mValueObject.getKcp02V05Status() );
        /* Get Value object property _kcp02V05Opdate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05Opdate" + " value=" + mValueObject.getKcp02V05Opdate() );
      }
    _kcp02V05Opdate.setObjectValue( mValueObject.getKcp02V05Opdate() );
        /* Get Value object property _kcp02V05Cldate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05Cldate" + " value=" + mValueObject.getKcp02V05Cldate() );
      }
    _kcp02V05Cldate.setObjectValue( mValueObject.getKcp02V05Cldate() );
        /* Get Value object property _kcp02V05Chdate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05Chdate" + " value=" + mValueObject.getKcp02V05Chdate() );
      }
    _kcp02V05Chdate.setObjectValue( mValueObject.getKcp02V05Chdate() );
        /* Get Value object property _kcp02V05ReopenDate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05ReopenDate" + " value=" + mValueObject.getKcp02V05ReopenDate() );
      }
    _kcp02V05ReopenDate.setObjectValue( mValueObject.getKcp02V05ReopenDate() );
        /* Get Value object property _kcp02V05TransferDate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05TransferDate" + " value=" + mValueObject.getKcp02V05TransferDate() );
      }
    _kcp02V05TransferDate.setObjectValue( mValueObject.getKcp02V05TransferDate() );
        /* Get Value object property _kcp02V05BadDoubt */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05BadDoubt" + " value=" + mValueObject.getKcp02V05BadDoubt() );
      }
    _kcp02V05BadDoubt.setObjectValue( mValueObject.getKcp02V05BadDoubt() );
        /* Get Value object property _kcp02V05OpenPrimeRc */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05OpenPrimeRc" + " value=" + mValueObject.getKcp02V05OpenPrimeRc() );
      }
    _kcp02V05OpenPrimeRc.setObjectValue( mValueObject.getKcp02V05OpenPrimeRc() );
        /* Get Value object property _kcp02V05OpenSupplemRc */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05OpenSupplemRc" + " value=" + mValueObject.getKcp02V05OpenSupplemRc() );
      }
    _kcp02V05OpenSupplemRc.setObjectValue( mValueObject.getKcp02V05OpenSupplemRc() );
        /* Get Value object property _kcp02V05FromFinInstRef */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05FromFinInstRef" + " value=" + mValueObject.getKcp02V05FromFinInstRef() );
      }
    _kcp02V05FromFinInstRef.setObjectValue( mValueObject.getKcp02V05FromFinInstRef() );
        /* Get Value object property _kcp02V05FromFinInstScode */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05FromFinInstScode" + " value=" + mValueObject.getKcp02V05FromFinInstScode() );
      }
    _kcp02V05FromFinInstScode.setObjectValue( mValueObject.getKcp02V05FromFinInstScode() );
        /* Get Value object property _kcp02V05ClosePrimeRc */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05ClosePrimeRc" + " value=" + mValueObject.getKcp02V05ClosePrimeRc() );
      }
    _kcp02V05ClosePrimeRc.setObjectValue( mValueObject.getKcp02V05ClosePrimeRc() );
        /* Get Value object property _kcp02V05CloseSupplemRc */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05CloseSupplemRc" + " value=" + mValueObject.getKcp02V05CloseSupplemRc() );
      }
    _kcp02V05CloseSupplemRc.setObjectValue( mValueObject.getKcp02V05CloseSupplemRc() );
        /* Get Value object property _kcp02V05ToFinInstRef */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05ToFinInstRef" + " value=" + mValueObject.getKcp02V05ToFinInstRef() );
      }
    _kcp02V05ToFinInstRef.setObjectValue( mValueObject.getKcp02V05ToFinInstRef() );
        /* Get Value object property _kcp02V05ToFinInstSortCode */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05ToFinInstSortCode" + " value=" + mValueObject.getKcp02V05ToFinInstSortCode() );
      }
    _kcp02V05ToFinInstSortCode.setObjectValue( mValueObject.getKcp02V05ToFinInstSortCode() );
        /* Get Value object property _kcp02V05TransferToSortCode */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05TransferToSortCode" + " value=" + mValueObject.getKcp02V05TransferToSortCode() );
      }
    _kcp02V05TransferToSortCode.setObjectValue( mValueObject.getKcp02V05TransferToSortCode() );
        /* Get Value object property _kcp02V05TransfrToAccNumber */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05TransfrToAccNumber" + " value=" + mValueObject.getKcp02V05TransfrToAccNumber() );
      }
    _kcp02V05TransfrToAccNumber.setObjectValue( mValueObject.getKcp02V05TransfrToAccNumber() );
        /* Get Value object property _kcp02V05TransfFromSortCode */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05TransfFromSortCode" + " value=" + mValueObject.getKcp02V05TransfFromSortCode() );
      }
    _kcp02V05TransfFromSortCode.setObjectValue( mValueObject.getKcp02V05TransfFromSortCode() );
        /* Get Value object property _kcp02V05TransferFromAccNum */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05TransferFromAccNum" + " value=" + mValueObject.getKcp02V05TransferFromAccNum() );
      }
    _kcp02V05TransferFromAccNum.setObjectValue( mValueObject.getKcp02V05TransferFromAccNum() );
        /* Get Value object property _kcp02V05NewChangeDate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05NewChangeDate" + " value=" + mValueObject.getKcp02V05NewChangeDate() );
      }
    _kcp02V05NewChangeDate.setObjectValue( mValueObject.getKcp02V05NewChangeDate() );
        /* Get Value object property _kcp02V05OldChangeDate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05OldChangeDate" + " value=" + mValueObject.getKcp02V05OldChangeDate() );
      }
    _kcp02V05OldChangeDate.setObjectValue( mValueObject.getKcp02V05OldChangeDate() );
        /* Get Value object property _kcp02V05MergeIndicator */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05MergeIndicator" + " value=" + mValueObject.getKcp02V05MergeIndicator() );
      }
    _kcp02V05MergeIndicator.setObjectValue( mValueObject.getKcp02V05MergeIndicator() );
        /* Get Value object property _kcp02V05Dormancy */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp02V05Dormancy" + " value=" + mValueObject.getKcp02V05Dormancy() );
      }
    _kcp02V05Dormancy.setObjectValue( mValueObject.getKcp02V05Dormancy() );
    }

  /**
   * {@inheritDoc}
   */
  public void setPropertyValue( final int index ) throws HostException
    {

    ICobolBinding child = getChildrenList().get( index );

       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
    if( !child.isBound() )
      {
      return;
      }

        /* Set the Value object property value from binding object */
    Object bindingValue = null;
    switch( index )
      {
      case 0:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp02V05Status( (Short) bindingValue );
        break;
      case 1:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp02V05Opdate( (String) bindingValue );
        break;
      case 2:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp02V05Cldate( (String) bindingValue );
        break;
      case 3:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp02V05Chdate( (String) bindingValue );
        break;
      case 4:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp02V05ReopenDate( (String) bindingValue );
        break;
      case 5:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp02V05TransferDate( (String) bindingValue );
        break;
      case 6:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp02V05BadDoubt( (Short) bindingValue );
        break;
      case 7:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp02V05OpenPrimeRc( (Short) bindingValue );
        break;
      case 8:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp02V05OpenSupplemRc( (Short) bindingValue );
        break;
      case 9:
        bindingValue = child.getObjectValue( Integer.class );
        mValueObject.setKcp02V05FromFinInstRef( (Integer) bindingValue );
        break;
      case 10:
        bindingValue = child.getObjectValue( Long.class );
        mValueObject.setKcp02V05FromFinInstScode( (Long) bindingValue );
        break;
      case 11:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp02V05ClosePrimeRc( (Short) bindingValue );
        break;
      case 12:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp02V05CloseSupplemRc( (Short) bindingValue );
        break;
      case 13:
        bindingValue = child.getObjectValue( Integer.class );
        mValueObject.setKcp02V05ToFinInstRef( (Integer) bindingValue );
        break;
      case 14:
        bindingValue = child.getObjectValue( Long.class );
        mValueObject.setKcp02V05ToFinInstSortCode( (Long) bindingValue );
        break;
      case 15:
        bindingValue = child.getObjectValue( Long.class );
        mValueObject.setKcp02V05TransferToSortCode( (Long) bindingValue );
        break;
      case 16:
        bindingValue = child.getObjectValue( Long.class );
        mValueObject.setKcp02V05TransfrToAccNumber( (Long) bindingValue );
        break;
      case 17:
        bindingValue = child.getObjectValue( Long.class );
        mValueObject.setKcp02V05TransfFromSortCode( (Long) bindingValue );
        break;
      case 18:
        bindingValue = child.getObjectValue( Long.class );
        mValueObject.setKcp02V05TransferFromAccNum( (Long) bindingValue );
        break;
      case 19:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp02V05NewChangeDate( (String) bindingValue );
        break;
      case 20:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp02V05OldChangeDate( (String) bindingValue );
        break;
      case 21:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp02V05MergeIndicator( (String) bindingValue );
        break;
      case 22:
        bindingValue = child.getObjectValue( Kcp02V05Dormancy.class );
        mValueObject.setKcp02V05Dormancy( (Kcp02V05Dormancy) bindingValue );
        break;
      default:
        break;
      }
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Setting value of Value object property " + child.getJaxbName() + " value=" + bindingValue );
      }
    }

  /**
   * {@inheritDoc}
   */
  public Object getObjectValue( final Class<?> type ) throws HostException
    {
    if( type.equals( Kcp02V05AccountStatusData.class ) )
      {
      return mValueObject;
      }
    else
      {
      throw new HostException( "Attempt to get binding " + getBindingName() + " as an incompatible type " + type );
      }
    }

  /**
   * {@inheritDoc}
   */
  public void setObjectValue( final Object bindingValue ) throws HostException
    {
    if( bindingValue == null )
      {
      mValueObject = null;
      return;
      }
    if( bindingValue.getClass().equals( Kcp02V05AccountStatusData.class ) )
      {
      mValueObject = (Kcp02V05AccountStatusData) bindingValue;
      }
    else
      {
      throw new HostException( "Attempt to set binding " + getBindingName() + " from an incompatible value " + bindingValue );
      }
    }

  /**
   * @return the java object factory for objects creation
   */
  public ObjectFactory getObjectFactory()
    {
    return mValueObjectFactory;
    }

  /**
   * @param valueObjectFactory the java object factory for objects creation
   */
  public void setObjectFactory( final Object valueObjectFactory )
    {
    mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

  /**
   * {@inheritDoc}
   */
  public boolean isSet()
    {
    return ( mValueObject != null );
    }

  /**
   * @return the bound Value object
   */
  public Kcp02V05AccountStatusData getKcp02V05AccountStatusData()
    {
    return mValueObject;
    }

  /**
   * The COBOL complex element maximum length in bytes.
   *
   * @return COBOL complex element maximum length in bytes
   */
  public int getByteLength()
    {
    return BYTE_LENGTH;
    }
  }

