package cascading.legstar.cobolcopybook.beans.bean5.bind;

import java.math.BigDecimal;

import cascading.legstar.cobolcopybook.beans.bean5.ObjectFactory;
import cascading.legstar.cobolcopybook.beans.bean5.Ogp04RepaymentData;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * LegStar Binding for Complex element :
 * Ogp04RepaymentData.
 * <p/>
 * This class was generated by LegStar Binding generator.
 */
public class Ogp04RepaymentDataBinding extends CComplexBinding
  {

  /**
   * Maximum host bytes size for this complex object.
   */
  private static final int BYTE_LENGTH = 23;
  /**
   * Binding factory.
   */
  private static final ICobolBindingFactory BF = CobolBindingFactory.getBindingFactory();
  /**
   * Static reference to Value object factory to be used as default.
   */
  private static final ObjectFactory JF = new ObjectFactory();
  /**
   * Current Value object factory (Defaults to the static one but can be
   * changed).
   */
  private ObjectFactory mValueObjectFactory = JF;
  /**
   * Logger.
   */
  private final Log _log = LogFactory.getLog( getClass() );
  /**
   * Child bound to value object property Ogp04LbloanMat(String).
   */
  public ICobolStringBinding _ogp04LbloanMat;
  /**
   * Child bound to value object property Ogp04Repamt(BigDecimal).
   */
  public ICobolPackedDecimalBinding _ogp04Repamt;
  /**
   * Child bound to value object property Ogp04Repfreq(Short).
   */
  public ICobolPackedDecimalBinding _ogp04Repfreq;
  /**
   * Child bound to value object property Ogp04Repdte(String).
   */
  public ICobolStringBinding _ogp04Repdte;
  /**
   * Child bound to value object property Ogp04Reptyp(Short).
   */
  public ICobolPackedDecimalBinding _ogp04Reptyp;
  /**
   * Child bound to value object property Ogp04Borrow(Short).
   */
  public ICobolPackedDecimalBinding _ogp04Borrow;
  /**
   * Child bound to value object property Ogp04Amtsanc(BigDecimal).
   */
  public ICobolPackedDecimalBinding _ogp04Amtsanc;
  /**
   * Child bound to value object property Ogp04MirasDate(String).
   */
  public ICobolStringBinding _ogp04MirasDate;
  /**
   * Value object to which this cobol complex element is bound.
   */
  private Ogp04RepaymentData mValueObject;
  /**
   * Indicates that the associated Value object just came from the constructor
   * and doesn't need to be recreated.
   */
  private boolean mUnusedValueObject = false;

  /**
   * Constructor for a root Complex element without a bound Value object.
   */
  public Ogp04RepaymentDataBinding()
    {
    this( null );
    }

  /**
   * Constructor for a root Complex element with a bound Value object.
   *
   * @param valueObject the concrete Value object instance bound to this
   *                    complex element
   */
  public Ogp04RepaymentDataBinding( final Ogp04RepaymentData valueObject )
    {
    this( "", "", null, valueObject );
    }

  /**
   * Constructor for a Complex element as a child of another element and
   * an associated Value object.
   *
   * @param bindingName   the identifier for this binding
   * @param fieldName     field name in parent Value object
   * @param valueObject   the concrete Value object instance bound to this
   *                      complex element
   * @param parentBinding a reference to the parent binding
   */
  public Ogp04RepaymentDataBinding( final String bindingName, final String fieldName, final ICobolComplexBinding parentBinding, final Ogp04RepaymentData valueObject )
    {

    super( bindingName, fieldName, Ogp04RepaymentData.class, null, parentBinding );
    mValueObject = valueObject;
    if( mValueObject != null )
      {
      mUnusedValueObject = true;
      }
    initChildren();
    setByteLength( BYTE_LENGTH );
    }

  /**
   * Creates a binding property for each child.
   */
  private void initChildren()
    {
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing started" );
      }
        /* Create binding children instances */

    _ogp04LbloanMat = BF.createStringBinding( "Ogp04LbloanMat", "Ogp04LbloanMat", String.class, this );
    _ogp04LbloanMat.setCobolName( "OGP04-LBLOAN-MAT" );
    _ogp04LbloanMat.setByteLength( 2 );
    _ogp04Repamt = BF.createPackedDecimalBinding( "Ogp04Repamt", "Ogp04Repamt", BigDecimal.class, this );
    _ogp04Repamt.setCobolName( "OGP04-REPAMT" );
    _ogp04Repamt.setByteLength( 7 );
    _ogp04Repamt.setTotalDigits( 13 );
    _ogp04Repamt.setFractionDigits( 2 );
    _ogp04Repamt.setIsSigned( true );
    _ogp04Repfreq = BF.createPackedDecimalBinding( "Ogp04Repfreq", "Ogp04Repfreq", Short.class, this );
    _ogp04Repfreq.setCobolName( "OGP04-REPFREQ" );
    _ogp04Repfreq.setByteLength( 1 );
    _ogp04Repfreq.setTotalDigits( 1 );
    _ogp04Repfreq.setIsSigned( true );
    _ogp04Repdte = BF.createStringBinding( "Ogp04Repdte", "Ogp04Repdte", String.class, this );
    _ogp04Repdte.setCobolName( "OGP04-REPDTE" );
    _ogp04Repdte.setByteLength( 2 );
    _ogp04Reptyp = BF.createPackedDecimalBinding( "Ogp04Reptyp", "Ogp04Reptyp", Short.class, this );
    _ogp04Reptyp.setCobolName( "OGP04-REPTYP" );
    _ogp04Reptyp.setByteLength( 1 );
    _ogp04Reptyp.setTotalDigits( 1 );
    _ogp04Reptyp.setIsSigned( true );
    _ogp04Borrow = BF.createPackedDecimalBinding( "Ogp04Borrow", "Ogp04Borrow", Short.class, this );
    _ogp04Borrow.setCobolName( "OGP04-BORROW" );
    _ogp04Borrow.setByteLength( 2 );
    _ogp04Borrow.setTotalDigits( 3 );
    _ogp04Borrow.setIsSigned( true );
    _ogp04Amtsanc = BF.createPackedDecimalBinding( "Ogp04Amtsanc", "Ogp04Amtsanc", BigDecimal.class, this );
    _ogp04Amtsanc.setCobolName( "OGP04-AMTSANC" );
    _ogp04Amtsanc.setByteLength( 6 );
    _ogp04Amtsanc.setTotalDigits( 11 );
    _ogp04Amtsanc.setFractionDigits( 2 );
    _ogp04Amtsanc.setIsSigned( true );
    _ogp04MirasDate = BF.createStringBinding( "Ogp04MirasDate", "Ogp04MirasDate", String.class, this );
    _ogp04MirasDate.setCobolName( "OGP04-MIRAS-DATE" );
    _ogp04MirasDate.setByteLength( 2 );

        /* Add children to children list */
    getChildrenList().add( _ogp04LbloanMat );
    getChildrenList().add( _ogp04Repamt );
    getChildrenList().add( _ogp04Repfreq );
    getChildrenList().add( _ogp04Repdte );
    getChildrenList().add( _ogp04Reptyp );
    getChildrenList().add( _ogp04Borrow );
    getChildrenList().add( _ogp04Amtsanc );
    getChildrenList().add( _ogp04MirasDate );

    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing successful" );
      }
    }

  /**
   * {@inheritDoc}
   */
  public void createValueObject() throws HostException
    {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
    if( mUnusedValueObject && mValueObject != null )
      {
      mUnusedValueObject = false;
      return;
      }
    mValueObject = mValueObjectFactory.createOgp04RepaymentData();
    }

  /**
   * {@inheritDoc}
   */
  public void setChildrenValues() throws HostException
    {

         /* Make sure there is an associated Value object*/
    if( mValueObject == null )
      {
      createValueObject();
      }
        /* Get Value object property _ogp04LbloanMat */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_ogp04LbloanMat" + " value=" + mValueObject.getOgp04LbloanMat() );
      }
    _ogp04LbloanMat.setObjectValue( mValueObject.getOgp04LbloanMat() );
        /* Get Value object property _ogp04Repamt */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_ogp04Repamt" + " value=" + mValueObject.getOgp04Repamt() );
      }
    _ogp04Repamt.setObjectValue( mValueObject.getOgp04Repamt() );
        /* Get Value object property _ogp04Repfreq */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_ogp04Repfreq" + " value=" + mValueObject.getOgp04Repfreq() );
      }
    _ogp04Repfreq.setObjectValue( mValueObject.getOgp04Repfreq() );
        /* Get Value object property _ogp04Repdte */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_ogp04Repdte" + " value=" + mValueObject.getOgp04Repdte() );
      }
    _ogp04Repdte.setObjectValue( mValueObject.getOgp04Repdte() );
        /* Get Value object property _ogp04Reptyp */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_ogp04Reptyp" + " value=" + mValueObject.getOgp04Reptyp() );
      }
    _ogp04Reptyp.setObjectValue( mValueObject.getOgp04Reptyp() );
        /* Get Value object property _ogp04Borrow */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_ogp04Borrow" + " value=" + mValueObject.getOgp04Borrow() );
      }
    _ogp04Borrow.setObjectValue( mValueObject.getOgp04Borrow() );
        /* Get Value object property _ogp04Amtsanc */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_ogp04Amtsanc" + " value=" + mValueObject.getOgp04Amtsanc() );
      }
    _ogp04Amtsanc.setObjectValue( mValueObject.getOgp04Amtsanc() );
        /* Get Value object property _ogp04MirasDate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_ogp04MirasDate" + " value=" + mValueObject.getOgp04MirasDate() );
      }
    _ogp04MirasDate.setObjectValue( mValueObject.getOgp04MirasDate() );
    }

  /**
   * {@inheritDoc}
   */
  public void setPropertyValue( final int index ) throws HostException
    {

    ICobolBinding child = getChildrenList().get( index );

       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
    if( !child.isBound() )
      {
      return;
      }

        /* Set the Value object property value from binding object */
    Object bindingValue = null;
    switch( index )
      {
      case 0:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setOgp04LbloanMat( (String) bindingValue );
        break;
      case 1:
        bindingValue = child.getObjectValue( BigDecimal.class );
        mValueObject.setOgp04Repamt( (BigDecimal) bindingValue );
        break;
      case 2:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setOgp04Repfreq( (Short) bindingValue );
        break;
      case 3:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setOgp04Repdte( (String) bindingValue );
        break;
      case 4:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setOgp04Reptyp( (Short) bindingValue );
        break;
      case 5:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setOgp04Borrow( (Short) bindingValue );
        break;
      case 6:
        bindingValue = child.getObjectValue( BigDecimal.class );
        mValueObject.setOgp04Amtsanc( (BigDecimal) bindingValue );
        break;
      case 7:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setOgp04MirasDate( (String) bindingValue );
        break;
      default:
        break;
      }
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Setting value of Value object property " + child.getJaxbName() + " value=" + bindingValue );
      }
    }

  /**
   * {@inheritDoc}
   */
  public Object getObjectValue( final Class<?> type ) throws HostException
    {
    if( type.equals( Ogp04RepaymentData.class ) )
      {
      return mValueObject;
      }
    else
      {
      throw new HostException( "Attempt to get binding " + getBindingName() + " as an incompatible type " + type );
      }
    }

  /**
   * {@inheritDoc}
   */
  public void setObjectValue( final Object bindingValue ) throws HostException
    {
    if( bindingValue == null )
      {
      mValueObject = null;
      return;
      }
    if( bindingValue.getClass().equals( Ogp04RepaymentData.class ) )
      {
      mValueObject = (Ogp04RepaymentData) bindingValue;
      }
    else
      {
      throw new HostException( "Attempt to set binding " + getBindingName() + " from an incompatible value " + bindingValue );
      }
    }

  /**
   * @return the java object factory for objects creation
   */
  public ObjectFactory getObjectFactory()
    {
    return mValueObjectFactory;
    }

  /**
   * @param valueObjectFactory the java object factory for objects creation
   */
  public void setObjectFactory( final Object valueObjectFactory )
    {
    mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

  /**
   * {@inheritDoc}
   */
  public boolean isSet()
    {
    return ( mValueObject != null );
    }

  /**
   * @return the bound Value object
   */
  public Ogp04RepaymentData getOgp04RepaymentData()
    {
    return mValueObject;
    }

  /**
   * The COBOL complex element maximum length in bytes.
   *
   * @return COBOL complex element maximum length in bytes
   */
  public int getByteLength()
    {
    return BYTE_LENGTH;
    }
  }

