package cascading.legstar.cobolcopybook.beans.bean14.bind;

import java.util.List;

import cascading.legstar.cobolcopybook.beans.bean14.Kcp16V05CrSuppList;
import cascading.legstar.cobolcopybook.beans.bean14.Kcp16V05DrSuppList;
import cascading.legstar.cobolcopybook.beans.bean14.Kcp16V05NotificationTable;
import cascading.legstar.cobolcopybook.beans.bean14.ObjectFactory;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolArrayComplexBinding;
import com.legstar.coxb.ICobolArrayStringBinding;
import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * LegStar Binding for Complex element :
 * Kcp16V05NotificationTable.
 * <p/>
 * This class was generated by LegStar Binding generator.
 */
public class Kcp16V05NotificationTableBinding
  extends CComplexBinding
  {

  /** Maximum host bytes size for this complex object. */
  private static final int BYTE_LENGTH = 158;
  /** Binding factory. */
  private static final ICobolBindingFactory BF
    = CobolBindingFactory.getBindingFactory();
  /** Static reference to Value object factory to be used as default. */
  private static final ObjectFactory JF = new ObjectFactory();
  /**
   * Current Value object factory (Defaults to the static one but can be
   * changed).
   */
  private ObjectFactory mValueObjectFactory = JF;
  /** Logger. */
  private final Log _log = LogFactory.getLog( getClass() );
  /** Child bound to value object property Kcp16V05NotificatTypeCode(String). */
  public ICobolStringBinding _kcp16V05NotificatTypeCode;
  /** Child bound to value object property Kcp16V05NotificatSubTypeCd(String). */
  public ICobolStringBinding _kcp16V05NotificatSubTypeCd;
  /** Child bound to value object property Kcp16V05NotificationProdDat(String). */
  public ICobolStringBinding _kcp16V05NotificationProdDat;
  /** Child bound to value object property Kcp16V05StmtFirstSheet(Integer). */
  public ICobolPackedDecimalBinding _kcp16V05StmtFirstSheet;
  /** Child bound to value object property Kcp16V05StmtLastSheet(Integer). */
  public ICobolPackedDecimalBinding _kcp16V05StmtLastSheet;
  /** Child bound to value object property Kcp16V05SpecialSheetNumber(Integer). */
  public ICobolPackedDecimalBinding _kcp16V05SpecialSheetNumber;
  /** Child bound to value object property Kcp16V05StmtDest(String). */
  public ICobolStringBinding _kcp16V05StmtDest;
  /** Child bound to value object property Kcp16V05StmtDupDest(String). */
  public ICobolStringBinding _kcp16V05StmtDupDest;
  /** Child bound to value object property Kcp16V05StmtStdte(String). */
  public ICobolStringBinding _kcp16V05StmtStdte;
  /** Child bound to value object property Kcp16V05StmtEnddte(String). */
  public ICobolStringBinding _kcp16V05StmtEnddte;
  /** Child bound to value object property Kcp16V05StmtCind(String). */
  public ICobolStringBinding _kcp16V05StmtCind;
  /** Child bound to value object property Kcp16V05Dissenter(String). */
  public ICobolStringBinding _kcp16V05Dissenter;
  /** Child bound to value object property Kcp16V05StmtReasno(Short). */
  public ICobolPackedDecimalBinding _kcp16V05StmtReasno;
  /** Child bound to value object property Kcp16V05StmtIssreas(String). */
  public ICobolArrayStringBinding _kcp16V05StmtIssreas;
  /** Child bound to value object property Kcp16V05DrSuppListno(Short). */
  public ICobolPackedDecimalBinding _kcp16V05DrSuppListno;
  /** Child bound to value object property Kcp16V05DrSuppList(Kcp16V05DrSuppList). */
  public ICobolArrayComplexBinding _kcp16V05DrSuppListWrapper;
  /** Binding item for complex array binding Kcp16V05DrSuppList. */
  public ICobolComplexBinding _kcp16V05DrSuppListWrapperItem;
  /** Child bound to value object property Kcp16V05CrSuppListno(Short). */
  public ICobolPackedDecimalBinding _kcp16V05CrSuppListno;
  /** Child bound to value object property Kcp16V05CrSuppList(Kcp16V05CrSuppList). */
  public ICobolArrayComplexBinding _kcp16V05CrSuppListWrapper;
  /** Binding item for complex array binding Kcp16V05CrSuppList. */
  public ICobolComplexBinding _kcp16V05CrSuppListWrapperItem;
  /** Value object to which this cobol complex element is bound. */
  private Kcp16V05NotificationTable mValueObject;
  /**
   * Indicates that the associated Value object just came from the constructor
   * and doesn't need to be recreated.
   */
  private boolean mUnusedValueObject = false;

  /**
   * Constructor for a root Complex element without a bound Value object.
   */
  public Kcp16V05NotificationTableBinding()
    {
    this( null );
    }

  /**
   * Constructor for a root Complex element with a bound Value object.
   *
   * @param valueObject the concrete Value object instance bound to this
   *                    complex element
   */
  public Kcp16V05NotificationTableBinding(
    final Kcp16V05NotificationTable valueObject )
    {
    this( "", "", null, valueObject );
    }

  /**
   * Constructor for a Complex element as a child of another element and
   * an associated Value object.
   *
   * @param bindingName   the identifier for this binding
   * @param fieldName     field name in parent Value object
   * @param valueObject   the concrete Value object instance bound to this
   *                      complex element
   * @param parentBinding a reference to the parent binding
   */
  public Kcp16V05NotificationTableBinding(
    final String bindingName,
    final String fieldName,
    final ICobolComplexBinding parentBinding,
    final Kcp16V05NotificationTable valueObject )
    {

    super( bindingName, fieldName, Kcp16V05NotificationTable.class, null, parentBinding );
    mValueObject = valueObject;
    if( mValueObject != null )
      {
      mUnusedValueObject = true;
      }
    initChildren();
    setByteLength( BYTE_LENGTH );
    }

  /** Creates a binding property for each child. */
  private void initChildren()
    {
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing started" );
      }
        /* Create binding children instances */

    _kcp16V05NotificatTypeCode = BF.createStringBinding( "Kcp16V05NotificatTypeCode",
      "Kcp16V05NotificatTypeCode", String.class, this );
    _kcp16V05NotificatTypeCode.setCobolName( "KCP16V05-NOTIFICAT-TYPE-CODE" );
    _kcp16V05NotificatTypeCode.setByteLength( 1 );
    _kcp16V05NotificatSubTypeCd = BF.createStringBinding( "Kcp16V05NotificatSubTypeCd",
      "Kcp16V05NotificatSubTypeCd", String.class, this );
    _kcp16V05NotificatSubTypeCd.setCobolName( "KCP16V05-NOTIFICAT-SUB-TYPE-CD" );
    _kcp16V05NotificatSubTypeCd.setByteLength( 1 );
    _kcp16V05NotificationProdDat = BF.createStringBinding( "Kcp16V05NotificationProdDat",
      "Kcp16V05NotificationProdDat", String.class, this );
    _kcp16V05NotificationProdDat.setCobolName( "KCP16V05-NOTIFICATION-PROD-DAT" );
    _kcp16V05NotificationProdDat.setByteLength( 2 );
    _kcp16V05StmtFirstSheet = BF.createPackedDecimalBinding( "Kcp16V05StmtFirstSheet",
      "Kcp16V05StmtFirstSheet", Integer.class, this );
    _kcp16V05StmtFirstSheet.setCobolName( "KCP16V05-STMT-FIRST-SHEET" );
    _kcp16V05StmtFirstSheet.setByteLength( 3 );
    _kcp16V05StmtFirstSheet.setTotalDigits( 5 );
    _kcp16V05StmtFirstSheet.setIsSigned( true );
    _kcp16V05StmtLastSheet = BF.createPackedDecimalBinding( "Kcp16V05StmtLastSheet",
      "Kcp16V05StmtLastSheet", Integer.class, this );
    _kcp16V05StmtLastSheet.setCobolName( "KCP16V05-STMT-LAST-SHEET" );
    _kcp16V05StmtLastSheet.setByteLength( 3 );
    _kcp16V05StmtLastSheet.setTotalDigits( 5 );
    _kcp16V05StmtLastSheet.setIsSigned( true );
    _kcp16V05SpecialSheetNumber = BF.createPackedDecimalBinding( "Kcp16V05SpecialSheetNumber",
      "Kcp16V05SpecialSheetNumber", Integer.class, this );
    _kcp16V05SpecialSheetNumber.setCobolName( "KCP16V05-SPECIAL-SHEET-NUMBER" );
    _kcp16V05SpecialSheetNumber.setByteLength( 3 );
    _kcp16V05SpecialSheetNumber.setTotalDigits( 5 );
    _kcp16V05SpecialSheetNumber.setIsSigned( true );
    _kcp16V05StmtDest = BF.createStringBinding( "Kcp16V05StmtDest",
      "Kcp16V05StmtDest", String.class, this );
    _kcp16V05StmtDest.setCobolName( "KCP16V05-STMT-DEST" );
    _kcp16V05StmtDest.setByteLength( 1 );
    _kcp16V05StmtDupDest = BF.createStringBinding( "Kcp16V05StmtDupDest",
      "Kcp16V05StmtDupDest", String.class, this );
    _kcp16V05StmtDupDest.setCobolName( "KCP16V05-STMT-DUP-DEST" );
    _kcp16V05StmtDupDest.setByteLength( 1 );
    _kcp16V05StmtStdte = BF.createStringBinding( "Kcp16V05StmtStdte",
      "Kcp16V05StmtStdte", String.class, this );
    _kcp16V05StmtStdte.setCobolName( "KCP16V05-STMT-STDTE" );
    _kcp16V05StmtStdte.setByteLength( 2 );
    _kcp16V05StmtEnddte = BF.createStringBinding( "Kcp16V05StmtEnddte",
      "Kcp16V05StmtEnddte", String.class, this );
    _kcp16V05StmtEnddte.setCobolName( "KCP16V05-STMT-ENDDTE" );
    _kcp16V05StmtEnddte.setByteLength( 2 );
    _kcp16V05StmtCind = BF.createStringBinding( "Kcp16V05StmtCind",
      "Kcp16V05StmtCind", String.class, this );
    _kcp16V05StmtCind.setCobolName( "KCP16V05-STMT-CIND" );
    _kcp16V05StmtCind.setByteLength( 1 );
    _kcp16V05Dissenter = BF.createStringBinding( "Kcp16V05Dissenter",
      "Kcp16V05Dissenter", String.class, this );
    _kcp16V05Dissenter.setCobolName( "KCP16V05-DISSENTER" );
    _kcp16V05Dissenter.setByteLength( 1 );
    _kcp16V05StmtReasno = BF.createPackedDecimalBinding( "Kcp16V05StmtReasno",
      "Kcp16V05StmtReasno", Short.class, this );
    _kcp16V05StmtReasno.setCobolName( "KCP16V05-STMT-REASNO" );
    _kcp16V05StmtReasno.setByteLength( 2 );
    _kcp16V05StmtReasno.setTotalDigits( 3 );
    _kcp16V05StmtReasno.setIsSigned( true );
    _kcp16V05StmtIssreas = BF.createArrayStringBinding( "Kcp16V05StmtIssreas",
      "Kcp16V05StmtIssreas", String.class, this );
    _kcp16V05StmtIssreas.setCobolName( "KCP16V05-STMT-ISSREAS" );
    _kcp16V05StmtIssreas.setByteLength( 10 );
    _kcp16V05StmtIssreas.setItemByteLength( 1 );
    _kcp16V05StmtIssreas.setMinOccurs( 10 );
    _kcp16V05StmtIssreas.setMaxOccurs( 10 );
    _kcp16V05DrSuppListno = BF.createPackedDecimalBinding( "Kcp16V05DrSuppListno",
      "Kcp16V05DrSuppListno", Short.class, this );
    _kcp16V05DrSuppListno.setCobolName( "KCP16V05-DR-SUPP-LISTNO" );
    _kcp16V05DrSuppListno.setByteLength( 1 );
    _kcp16V05DrSuppListno.setTotalDigits( 1 );
    _kcp16V05DrSuppListno.setIsSigned( true );
    _kcp16V05DrSuppListWrapperItem = new Kcp16V05DrSuppListBinding( "Kcp16V05DrSuppListWrapperItem",
      "Kcp16V05DrSuppList", this, null );
    _kcp16V05DrSuppListWrapper = new Kcp16V05DrSuppListWrapperBinding( "Kcp16V05DrSuppListWrapper",
      "Kcp16V05DrSuppList", this, _kcp16V05DrSuppListWrapperItem );
    _kcp16V05DrSuppListWrapper.setCobolName( "KCP16V05-DR-SUPP-LIST" );
    _kcp16V05DrSuppListWrapper.setByteLength( 24 );
    _kcp16V05DrSuppListWrapper.setItemByteLength( 6 );
    _kcp16V05DrSuppListWrapper.setMinOccurs( 4 );
    _kcp16V05DrSuppListWrapper.setMaxOccurs( 4 );
    _kcp16V05CrSuppListno = BF.createPackedDecimalBinding( "Kcp16V05CrSuppListno",
      "Kcp16V05CrSuppListno", Short.class, this );
    _kcp16V05CrSuppListno.setCobolName( "KCP16V05-CR-SUPP-LISTNO" );
    _kcp16V05CrSuppListno.setByteLength( 1 );
    _kcp16V05CrSuppListno.setTotalDigits( 1 );
    _kcp16V05CrSuppListno.setIsSigned( true );
    _kcp16V05CrSuppListWrapperItem = new Kcp16V05CrSuppListBinding( "Kcp16V05CrSuppListWrapperItem",
      "Kcp16V05CrSuppList", this, null );
    _kcp16V05CrSuppListWrapper = new Kcp16V05CrSuppListWrapperBinding( "Kcp16V05CrSuppListWrapper",
      "Kcp16V05CrSuppList", this, _kcp16V05CrSuppListWrapperItem );
    _kcp16V05CrSuppListWrapper.setCobolName( "KCP16V05-CR-SUPP-LIST" );
    _kcp16V05CrSuppListWrapper.setByteLength( 99 );
    _kcp16V05CrSuppListWrapper.setItemByteLength( 11 );
    _kcp16V05CrSuppListWrapper.setMinOccurs( 9 );
    _kcp16V05CrSuppListWrapper.setMaxOccurs( 9 );

        /* Add children to children list */
    getChildrenList().add( _kcp16V05NotificatTypeCode );
    getChildrenList().add( _kcp16V05NotificatSubTypeCd );
    getChildrenList().add( _kcp16V05NotificationProdDat );
    getChildrenList().add( _kcp16V05StmtFirstSheet );
    getChildrenList().add( _kcp16V05StmtLastSheet );
    getChildrenList().add( _kcp16V05SpecialSheetNumber );
    getChildrenList().add( _kcp16V05StmtDest );
    getChildrenList().add( _kcp16V05StmtDupDest );
    getChildrenList().add( _kcp16V05StmtStdte );
    getChildrenList().add( _kcp16V05StmtEnddte );
    getChildrenList().add( _kcp16V05StmtCind );
    getChildrenList().add( _kcp16V05Dissenter );
    getChildrenList().add( _kcp16V05StmtReasno );
    getChildrenList().add( _kcp16V05StmtIssreas );
    getChildrenList().add( _kcp16V05DrSuppListno );
    getChildrenList().add( _kcp16V05DrSuppListWrapper );
    getChildrenList().add( _kcp16V05CrSuppListno );
    getChildrenList().add( _kcp16V05CrSuppListWrapper );

    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing successful" );
      }
    }

  /** {@inheritDoc} */
  public void createValueObject() throws HostException
    {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
    if( mUnusedValueObject && mValueObject != null )
      {
      mUnusedValueObject = false;
      return;
      }
    mValueObject = mValueObjectFactory.createKcp16V05NotificationTable();
    }

  /** {@inheritDoc} */
  public void setChildrenValues() throws HostException
    {

         /* Make sure there is an associated Value object*/
    if( mValueObject == null )
      {
      createValueObject();
      }
        /* Get Value object property _kcp16V05NotificatTypeCode */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05NotificatTypeCode"
        + " value=" + mValueObject.getKcp16V05NotificatTypeCode() );
      }
    _kcp16V05NotificatTypeCode.setObjectValue( mValueObject.getKcp16V05NotificatTypeCode() );
        /* Get Value object property _kcp16V05NotificatSubTypeCd */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05NotificatSubTypeCd"
        + " value=" + mValueObject.getKcp16V05NotificatSubTypeCd() );
      }
    _kcp16V05NotificatSubTypeCd.setObjectValue( mValueObject.getKcp16V05NotificatSubTypeCd() );
        /* Get Value object property _kcp16V05NotificationProdDat */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05NotificationProdDat"
        + " value=" + mValueObject.getKcp16V05NotificationProdDat() );
      }
    _kcp16V05NotificationProdDat.setObjectValue( mValueObject.getKcp16V05NotificationProdDat() );
        /* Get Value object property _kcp16V05StmtFirstSheet */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05StmtFirstSheet"
        + " value=" + mValueObject.getKcp16V05StmtFirstSheet() );
      }
    _kcp16V05StmtFirstSheet.setObjectValue( mValueObject.getKcp16V05StmtFirstSheet() );
        /* Get Value object property _kcp16V05StmtLastSheet */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05StmtLastSheet"
        + " value=" + mValueObject.getKcp16V05StmtLastSheet() );
      }
    _kcp16V05StmtLastSheet.setObjectValue( mValueObject.getKcp16V05StmtLastSheet() );
        /* Get Value object property _kcp16V05SpecialSheetNumber */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05SpecialSheetNumber"
        + " value=" + mValueObject.getKcp16V05SpecialSheetNumber() );
      }
    _kcp16V05SpecialSheetNumber.setObjectValue( mValueObject.getKcp16V05SpecialSheetNumber() );
        /* Get Value object property _kcp16V05StmtDest */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05StmtDest"
        + " value=" + mValueObject.getKcp16V05StmtDest() );
      }
    _kcp16V05StmtDest.setObjectValue( mValueObject.getKcp16V05StmtDest() );
        /* Get Value object property _kcp16V05StmtDupDest */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05StmtDupDest"
        + " value=" + mValueObject.getKcp16V05StmtDupDest() );
      }
    _kcp16V05StmtDupDest.setObjectValue( mValueObject.getKcp16V05StmtDupDest() );
        /* Get Value object property _kcp16V05StmtStdte */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05StmtStdte"
        + " value=" + mValueObject.getKcp16V05StmtStdte() );
      }
    _kcp16V05StmtStdte.setObjectValue( mValueObject.getKcp16V05StmtStdte() );
        /* Get Value object property _kcp16V05StmtEnddte */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05StmtEnddte"
        + " value=" + mValueObject.getKcp16V05StmtEnddte() );
      }
    _kcp16V05StmtEnddte.setObjectValue( mValueObject.getKcp16V05StmtEnddte() );
        /* Get Value object property _kcp16V05StmtCind */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05StmtCind"
        + " value=" + mValueObject.getKcp16V05StmtCind() );
      }
    _kcp16V05StmtCind.setObjectValue( mValueObject.getKcp16V05StmtCind() );
        /* Get Value object property _kcp16V05Dissenter */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05Dissenter"
        + " value=" + mValueObject.getKcp16V05Dissenter() );
      }
    _kcp16V05Dissenter.setObjectValue( mValueObject.getKcp16V05Dissenter() );
        /* Get Value object property _kcp16V05StmtReasno */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05StmtReasno"
        + " value=" + mValueObject.getKcp16V05StmtReasno() );
      }
    _kcp16V05StmtReasno.setObjectValue( mValueObject.getKcp16V05StmtReasno() );
        /* Get Value object property _kcp16V05StmtIssreas */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05StmtIssreas"
        + " value=" + mValueObject.getKcp16V05StmtIssreas() );
      }
    _kcp16V05StmtIssreas.setObjectValue( mValueObject.getKcp16V05StmtIssreas() );
        /* Get Value object property _kcp16V05DrSuppListno */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05DrSuppListno"
        + " value=" + mValueObject.getKcp16V05DrSuppListno() );
      }
    _kcp16V05DrSuppListno.setObjectValue( mValueObject.getKcp16V05DrSuppListno() );
        /* Get Value object property _kcp16V05DrSuppListWrapper */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05DrSuppListWrapper"
        + " value=" + mValueObject.getKcp16V05DrSuppList() );
      }
    _kcp16V05DrSuppListWrapper.setObjectValue( mValueObject.getKcp16V05DrSuppList() );
        /* Get Value object property _kcp16V05CrSuppListno */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05CrSuppListno"
        + " value=" + mValueObject.getKcp16V05CrSuppListno() );
      }
    _kcp16V05CrSuppListno.setObjectValue( mValueObject.getKcp16V05CrSuppListno() );
        /* Get Value object property _kcp16V05CrSuppListWrapper */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_kcp16V05CrSuppListWrapper"
        + " value=" + mValueObject.getKcp16V05CrSuppList() );
      }
    _kcp16V05CrSuppListWrapper.setObjectValue( mValueObject.getKcp16V05CrSuppList() );
    }

  /** {@inheritDoc} */
  public void setPropertyValue( final int index ) throws HostException
    {

    ICobolBinding child = getChildrenList().get( index );

       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
    if( !child.isBound() )
      {
      return;
      }

        /* Set the Value object property value from binding object */
    Object bindingValue = null;
    switch( index )
      {
      case 0:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp16V05NotificatTypeCode( (String) bindingValue );
        break;
      case 1:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp16V05NotificatSubTypeCd( (String) bindingValue );
        break;
      case 2:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp16V05NotificationProdDat( (String) bindingValue );
        break;
      case 3:
        bindingValue = child.getObjectValue( Integer.class );
        mValueObject.setKcp16V05StmtFirstSheet( (Integer) bindingValue );
        break;
      case 4:
        bindingValue = child.getObjectValue( Integer.class );
        mValueObject.setKcp16V05StmtLastSheet( (Integer) bindingValue );
        break;
      case 5:
        bindingValue = child.getObjectValue( Integer.class );
        mValueObject.setKcp16V05SpecialSheetNumber( (Integer) bindingValue );
        break;
      case 6:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp16V05StmtDest( (String) bindingValue );
        break;
      case 7:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp16V05StmtDupDest( (String) bindingValue );
        break;
      case 8:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp16V05StmtStdte( (String) bindingValue );
        break;
      case 9:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp16V05StmtEnddte( (String) bindingValue );
        break;
      case 10:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp16V05StmtCind( (String) bindingValue );
        break;
      case 11:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp16V05Dissenter( (String) bindingValue );
        break;
      case 12:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp16V05StmtReasno( (Short) bindingValue );
        break;
      case 13:
        bindingValue = child.getObjectValue( String.class );
        List<String> listKcp16V05StmtIssreas = cast( bindingValue );
        mValueObject.getKcp16V05StmtIssreas().clear();
        mValueObject.getKcp16V05StmtIssreas().addAll( listKcp16V05StmtIssreas );
        break;
      case 14:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp16V05DrSuppListno( (Short) bindingValue );
        break;
      case 15:
        bindingValue = child.getObjectValue( Kcp16V05DrSuppList.class );
        List<Kcp16V05DrSuppList> listKcp16V05DrSuppListWrapper = cast( bindingValue );
        mValueObject.getKcp16V05DrSuppList().clear();
        mValueObject.getKcp16V05DrSuppList().addAll( listKcp16V05DrSuppListWrapper );
        break;
      case 16:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp16V05CrSuppListno( (Short) bindingValue );
        break;
      case 17:
        bindingValue = child.getObjectValue( Kcp16V05CrSuppList.class );
        List<Kcp16V05CrSuppList> listKcp16V05CrSuppListWrapper = cast( bindingValue );
        mValueObject.getKcp16V05CrSuppList().clear();
        mValueObject.getKcp16V05CrSuppList().addAll( listKcp16V05CrSuppListWrapper );
        break;
      default:
        break;
      }
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Setting value of Value object property "
        + child.getJaxbName()
        + " value=" + bindingValue );
      }
    }

  /** {@inheritDoc} */
  public Object getObjectValue(
    final Class<?> type ) throws HostException
    {
    if( type.equals( Kcp16V05NotificationTable.class ) )
      {
      return mValueObject;
      }
    else
      {
      throw new HostException( "Attempt to get binding " + getBindingName()
        + " as an incompatible type " + type );
      }
    }

  /** {@inheritDoc} */
  public void setObjectValue(
    final Object bindingValue ) throws HostException
    {
    if( bindingValue == null )
      {
      mValueObject = null;
      return;
      }
    if( bindingValue.getClass().equals( Kcp16V05NotificationTable.class ) )
      {
      mValueObject = (Kcp16V05NotificationTable) bindingValue;
      }
    else
      {
      throw new HostException( "Attempt to set binding " + getBindingName()
        + " from an incompatible value " + bindingValue );
      }
    }

  /**
   * @return the java object factory for objects creation
   */
  public ObjectFactory getObjectFactory()
    {
    return mValueObjectFactory;
    }

  /**
   * @param valueObjectFactory the java object factory for objects creation
   */
  public void setObjectFactory( final Object valueObjectFactory )
    {
    mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

  /** {@inheritDoc} */
  public boolean isSet()
    {
    return ( mValueObject != null );
    }

  /**
   * @return the bound Value object
   */
  public Kcp16V05NotificationTable getKcp16V05NotificationTable()
    {
    return mValueObject;
    }

  /**
   * The COBOL complex element maximum length in bytes.
   *
   * @return COBOL complex element maximum length in bytes
   */
  public int getByteLength()
    {
    return BYTE_LENGTH;
    }
  }

