/*
 * Copyright (c) 2007-2015 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


buildscript {
  repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url 'http://conjars.org/repo/' }
  }

  dependencies {
    classpath 'concurrentinc:documentation-plugin:1.1.1-14'
    classpath 'eu.appsatori:gradle-fatjar-plugin:0.2'
  }

}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply from: "${rootDir}/etc/s3Upload.gradle"

allprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'fatjar'
}

subprojects { subproject ->

  apply plugin: 'documentation-plugin'

  repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url 'http://conjars.org/repo/' }
  }

  createDocs {
    targetStyle = "cascading"

    sourceDir = file( "${subproject.projectDir}/src/asciidoc" )
    imagesDir = file( "${subproject.projectDir}/src/asciidoc/images" )

    options = [doctype: "book",]

    attributes = [revnumber: "3.0.0",]
  }

  task zipDocs( type: Zip, dependsOn: createDocs ) {
    baseName = "${project.name}"
    from( createDocs.outputDir ) {
      include '*.*'
    }
    into "${project.name}"
  }

  task docDist( type: Copy, dependsOn: [createDocs, zipDocs] ) {
    description = "publish documentation"

    from createDocs.outputDir
    from zipDocs.archivePath
    into "${rootProject.s3UploadDocs.source}/${project.name}"

    rootProject.s3UploadDocs.dependsOn docDist
  }
}

task createDocs {
  dependsOn << subprojects.createDocs
}

