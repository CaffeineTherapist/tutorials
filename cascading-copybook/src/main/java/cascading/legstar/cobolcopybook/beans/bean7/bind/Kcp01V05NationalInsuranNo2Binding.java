package cascading.legstar.cobolcopybook.beans.bean7.bind;

import cascading.legstar.cobolcopybook.beans.bean7.Kcp01V05NationalInsuranNo2;
import cascading.legstar.cobolcopybook.beans.bean7.ObjectFactory;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * LegStar Binding for Complex element :
 * Kcp01V05NationalInsuranNo2.
 * <p/>
 * This class was generated by LegStar Binding generator.
 */
public class Kcp01V05NationalInsuranNo2Binding extends CComplexBinding
  {

  /**
   * Maximum host bytes size for this complex object.
   */
  private static final int BYTE_LENGTH = 7;
  /**
   * Binding factory.
   */
  private static final ICobolBindingFactory BF = CobolBindingFactory.getBindingFactory();
  /**
   * Static reference to Value object factory to be used as default.
   */
  private static final ObjectFactory JF = new ObjectFactory();
  /**
   * Current Value object factory (Defaults to the static one but can be
   * changed).
   */
  private ObjectFactory mValueObjectFactory = JF;
  /**
   * Logger.
   */
  private final Log _log = LogFactory.getLog( getClass() );
  /**
   * Child bound to value object property Kcp01V05NatinsNo2A(String).
   */
  public ICobolStringBinding _kcp01V05NatinsNo2A;
  /**
   * Child bound to value object property Kcp01V05NatinsNo2B(Integer).
   */
  public ICobolPackedDecimalBinding _kcp01V05NatinsNo2B;
  /**
   * Child bound to value object property Kcp01V05NatinsNo2C(String).
   */
  public ICobolStringBinding _kcp01V05NatinsNo2C;
  /**
   * Value object to which this cobol complex element is bound.
   */
  private Kcp01V05NationalInsuranNo2 mValueObject;
  /**
   * Indicates that the associated Value object just came from the constructor
   * and doesn't need to be recreated.
   */
  private boolean mUnusedValueObject = false;

  /**
   * Constructor for a root Complex element without a bound Value object.
   */
  public Kcp01V05NationalInsuranNo2Binding()
    {
    this( null );
    }

  /**
   * Constructor for a root Complex element with a bound Value object.
   *
   * @param valueObject the concrete Value object instance bound to this
   *                    complex element
   */
  public Kcp01V05NationalInsuranNo2Binding( final Kcp01V05NationalInsuranNo2 valueObject )
    {
    this( "", "", null, valueObject );
    }

  /**
   * Constructor for a Complex element as a child of another element and
   * an associated Value object.
   *
   * @param bindingName   the identifier for this binding
   * @param fieldName     field name in parent Value object
   * @param valueObject   the concrete Value object instance bound to this
   *                      complex element
   * @param parentBinding a reference to the parent binding
   */
  public Kcp01V05NationalInsuranNo2Binding( final String bindingName, final String fieldName, final ICobolComplexBinding parentBinding, final Kcp01V05NationalInsuranNo2 valueObject )
    {

    super( bindingName, fieldName, Kcp01V05NationalInsuranNo2.class, null, parentBinding );
    mValueObject = valueObject;
    if( mValueObject != null )
      {
      mUnusedValueObject = true;
      }
    initChildren();
    setByteLength( BYTE_LENGTH );
    }

  /**
   * Creates a binding property for each child.
   */
  private void initChildren()
    {
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing started" );
      }
        /* Create binding children instances */

    _kcp01V05NatinsNo2A = BF.createStringBinding( "Kcp01V05NatinsNo2A", "Kcp01V05NatinsNo2A", String.class, this );
    _kcp01V05NatinsNo2A.setCobolName( "KCP01V05-NATINS-NO-2A" );
    _kcp01V05NatinsNo2A.setByteLength( 2 );
    _kcp01V05NatinsNo2B = BF.createPackedDecimalBinding( "Kcp01V05NatinsNo2B", "Kcp01V05NatinsNo2B", Integer.class, this );
    _kcp01V05NatinsNo2B.setCobolName( "KCP01V05-NATINS-NO-2B" );
    _kcp01V05NatinsNo2B.setByteLength( 4 );
    _kcp01V05NatinsNo2B.setTotalDigits( 7 );
    _kcp01V05NatinsNo2B.setIsSigned( true );
    _kcp01V05NatinsNo2C = BF.createStringBinding( "Kcp01V05NatinsNo2C", "Kcp01V05NatinsNo2C", String.class, this );
    _kcp01V05NatinsNo2C.setCobolName( "KCP01V05-NATINS-NO-2C" );
    _kcp01V05NatinsNo2C.setByteLength( 1 );

        /* Add children to children list */
    getChildrenList().add( _kcp01V05NatinsNo2A );
    getChildrenList().add( _kcp01V05NatinsNo2B );
    getChildrenList().add( _kcp01V05NatinsNo2C );

    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing successful" );
      }
    }

  /**
   * {@inheritDoc}
   */
  public void createValueObject() throws HostException
    {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
    if( mUnusedValueObject && mValueObject != null )
      {
      mUnusedValueObject = false;
      return;
      }
    mValueObject = mValueObjectFactory.createKcp01V05NationalInsuranNo2();
    }

  /**
   * {@inheritDoc}
   */
  public void setChildrenValues() throws HostException
    {

         /* Make sure there is an associated Value object*/
    if( mValueObject == null )
      {
      createValueObject();
      }
        /* Get Value object property _kcp01V05NatinsNo2A */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp01V05NatinsNo2A" + " value=" + mValueObject.getKcp01V05NatinsNo2A() );
      }
    _kcp01V05NatinsNo2A.setObjectValue( mValueObject.getKcp01V05NatinsNo2A() );
        /* Get Value object property _kcp01V05NatinsNo2B */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp01V05NatinsNo2B" + " value=" + mValueObject.getKcp01V05NatinsNo2B() );
      }
    _kcp01V05NatinsNo2B.setObjectValue( mValueObject.getKcp01V05NatinsNo2B() );
        /* Get Value object property _kcp01V05NatinsNo2C */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp01V05NatinsNo2C" + " value=" + mValueObject.getKcp01V05NatinsNo2C() );
      }
    _kcp01V05NatinsNo2C.setObjectValue( mValueObject.getKcp01V05NatinsNo2C() );
    }

  /**
   * {@inheritDoc}
   */
  public void setPropertyValue( final int index ) throws HostException
    {

    ICobolBinding child = getChildrenList().get( index );

       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
    if( !child.isBound() )
      {
      return;
      }

        /* Set the Value object property value from binding object */
    Object bindingValue = null;
    switch( index )
      {
      case 0:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp01V05NatinsNo2A( (String) bindingValue );
        break;
      case 1:
        bindingValue = child.getObjectValue( Integer.class );
        mValueObject.setKcp01V05NatinsNo2B( (Integer) bindingValue );
        break;
      case 2:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp01V05NatinsNo2C( (String) bindingValue );
        break;
      default:
        break;
      }
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Setting value of Value object property " + child.getJaxbName() + " value=" + bindingValue );
      }
    }

  /**
   * {@inheritDoc}
   */
  public Object getObjectValue( final Class<?> type ) throws HostException
    {
    if( type.equals( Kcp01V05NationalInsuranNo2.class ) )
      {
      return mValueObject;
      }
    else
      {
      throw new HostException( "Attempt to get binding " + getBindingName() + " as an incompatible type " + type );
      }
    }

  /**
   * {@inheritDoc}
   */
  public void setObjectValue( final Object bindingValue ) throws HostException
    {
    if( bindingValue == null )
      {
      mValueObject = null;
      return;
      }
    if( bindingValue.getClass().equals( Kcp01V05NationalInsuranNo2.class ) )
      {
      mValueObject = (Kcp01V05NationalInsuranNo2) bindingValue;
      }
    else
      {
      throw new HostException( "Attempt to set binding " + getBindingName() + " from an incompatible value " + bindingValue );
      }
    }

  /**
   * @return the java object factory for objects creation
   */
  public ObjectFactory getObjectFactory()
    {
    return mValueObjectFactory;
    }

  /**
   * @param valueObjectFactory the java object factory for objects creation
   */
  public void setObjectFactory( final Object valueObjectFactory )
    {
    mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

  /**
   * {@inheritDoc}
   */
  public boolean isSet()
    {
    return ( mValueObject != null );
    }

  /**
   * @return the bound Value object
   */
  public Kcp01V05NationalInsuranNo2 getKcp01V05NationalInsuranNo2()
    {
    return mValueObject;
    }

  /**
   * The COBOL complex element maximum length in bytes.
   *
   * @return COBOL complex element maximum length in bytes
   */
  public int getByteLength()
    {
    return BYTE_LENGTH;
    }
  }

