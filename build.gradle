/*
 * Copyright (c) 2007-2013 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven{ url 'http://conjars.org/repo/' }
    maven{ url 'http://jcenter.bintray.com' }
  }

  dependencies {
    classpath 'concurrentinc:cascading-asciidoc:1.0.0-wip-6'
    classpath 'eu.appsatori:gradle-fatjar-plugin:0.2'
  }

}

ext.redshiftPostgresVersion = '8.0-318.jdbc3'
ext.hadoopVersion = "1.2.1"
ext.cascadingVersion = '2.5.5'
ext.cascadingJDBCVersion = '2.5.4'
ext.slf4jVersion = '1.7.2'

apply plugin: 'idea'
apply plugin: 'eclipse'
apply from: "${rootDir}/etc/s3Upload.gradle"

subprojects { subproject ->
  apply plugin: 'java'
  apply plugin: 'cascadingasciidoc'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'fatjar'

  repositories {
    mavenLocal()
    mavenCentral()
    maven{ url 'http://conjars.org/repo/' }
    maven{ url 'http://jcenter.bintray.com' }
  }

  dependencies {

    compile group: 'cascading', name: 'cascading-jdbc-redshift', version: cascadingJDBCVersion
    /*compile group: 'cascading', name: 'cascading-jdbc-teradata', version: cascadingJDBCVersion*/
    compile group: 'postgresql', name: 'postgresql', version: redshiftPostgresVersion

    compile group: 'cascading', name: 'cascading-core', version: cascadingVersion
    compile group: 'cascading', name: 'cascading-hadoop', version: cascadingVersion
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

    compile( group: 'org.apache.hadoop', name: 'hadoop-core', version: hadoopVersion ) {
      exclude group: 'ant'
      exclude group: 'junit'
      exclude group: 'hsqldb'
      exclude group: 'oro'
    }

  }

  if (subproject.name == 'etl-log') {
    createDocs {
       File sourceDir = new File('etl-log/etl-log-docs/src/asciidoc')
    }
  }
  
  task zipDocs( type: Zip, dependsOn: createDocs ){
    baseName = "${project.name}"
    from (createDocs.outputDir){
        include '*.*'
    }
    into "${project.name}"
  }


  task docDist( type: Copy, dependsOn: [ createDocs, zipDocs ] ) {
    description = "publish documentation"

    from createDocs.outputDir
    from zipDocs.archivePath
    into "${rootProject.s3UploadDocs.source}/${project.name}"

    rootProject.s3UploadDocs.dependsOn docDist
  }
}
