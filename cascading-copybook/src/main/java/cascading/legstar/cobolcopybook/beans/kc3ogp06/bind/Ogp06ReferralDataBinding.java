package cascading.legstar.cobolcopybook.beans.kc3ogp06.bind;

import java.util.List;

import cascading.legstar.cobolcopybook.beans.kc3ogp06.ObjectFactory;
import cascading.legstar.cobolcopybook.beans.kc3ogp06.Ogp06ReferDayOfWeek;
import cascading.legstar.cobolcopybook.beans.kc3ogp06.Ogp06ReferralData;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolArrayComplexBinding;
import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * LegStar Binding for Complex element :
 * Ogp06ReferralData.
 * <p/>
 * This class was generated by LegStar Binding generator.
 */
public class Ogp06ReferralDataBinding
  extends CComplexBinding
  {

  /** Maximum host bytes size for this complex object. */
  private static final int BYTE_LENGTH = 45;
  /** Binding factory. */
  private static final ICobolBindingFactory BF
    = CobolBindingFactory.getBindingFactory();
  /** Static reference to Value object factory to be used as default. */
  private static final ObjectFactory JF = new ObjectFactory();
  /**
   * Current Value object factory (Defaults to the static one but can be
   * changed).
   */
  private ObjectFactory mValueObjectFactory = JF;
  /** Logger. */
  private final Log _log = LogFactory.getLog( getClass() );
  /** Child bound to value object property Ogp06FhReferStreamNo(Short). */
  public ICobolPackedDecimalBinding _ogp06FhReferStreamNo;
  /** Child bound to value object property Ogp06ReferDueDate(String). */
  public ICobolStringBinding _ogp06ReferDueDate;
  /** Child bound to value object property Ogp06Refind(Short). */
  public ICobolPackedDecimalBinding _ogp06Refind;
  /** Child bound to value object property Ogp06ReferReason(Short). */
  public ICobolPackedDecimalBinding _ogp06ReferReason;
  /** Child bound to value object property Ogp06ReferReasonDesc(String). */
  public ICobolStringBinding _ogp06ReferReasonDesc;
  /** Child bound to value object property Ogp06ReferMonthDay(Short). */
  public ICobolPackedDecimalBinding _ogp06ReferMonthDay;
  /** Child bound to value object property Ogp06ReferFreq(String). */
  public ICobolStringBinding _ogp06ReferFreq;
  /** Child bound to value object property Ogp06ReferDayOfWeek(Ogp06ReferDayOfWeek). */
  public ICobolArrayComplexBinding _ogp06ReferDayOfWeekWrapper;
  /** Binding item for complex array binding Ogp06ReferDayOfWeek. */
  public ICobolComplexBinding _ogp06ReferDayOfWeekWrapperItem;
  /** Value object to which this cobol complex element is bound. */
  private Ogp06ReferralData mValueObject;
  /**
   * Indicates that the associated Value object just came from the constructor
   * and doesn't need to be recreated.
   */
  private boolean mUnusedValueObject = false;

  /**
   * Constructor for a root Complex element without a bound Value object.
   */
  public Ogp06ReferralDataBinding()
    {
    this( null );
    }

  /**
   * Constructor for a root Complex element with a bound Value object.
   *
   * @param valueObject the concrete Value object instance bound to this
   *                    complex element
   */
  public Ogp06ReferralDataBinding(
    final Ogp06ReferralData valueObject )
    {
    this( "", "", null, valueObject );
    }

  /**
   * Constructor for a Complex element as a child of another element and
   * an associated Value object.
   *
   * @param bindingName   the identifier for this binding
   * @param fieldName     field name in parent Value object
   * @param valueObject   the concrete Value object instance bound to this
   *                      complex element
   * @param parentBinding a reference to the parent binding
   */
  public Ogp06ReferralDataBinding(
    final String bindingName,
    final String fieldName,
    final ICobolComplexBinding parentBinding,
    final Ogp06ReferralData valueObject )
    {

    super( bindingName, fieldName, Ogp06ReferralData.class, null, parentBinding );
    mValueObject = valueObject;
    if( mValueObject != null )
      {
      mUnusedValueObject = true;
      }
    initChildren();
    setByteLength( BYTE_LENGTH );
    }

  /** Creates a binding property for each child. */
  private void initChildren()
    {
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing started" );
      }
        /* Create binding children instances */

    _ogp06FhReferStreamNo = BF.createPackedDecimalBinding( "Ogp06FhReferStreamNo",
      "Ogp06FhReferStreamNo", Short.class, this );
    _ogp06FhReferStreamNo.setCobolName( "OGP06-FH-REFER-STREAM-NO" );
    _ogp06FhReferStreamNo.setByteLength( 2 );
    _ogp06FhReferStreamNo.setTotalDigits( 3 );
    _ogp06FhReferStreamNo.setIsSigned( true );
    _ogp06ReferDueDate = BF.createStringBinding( "Ogp06ReferDueDate",
      "Ogp06ReferDueDate", String.class, this );
    _ogp06ReferDueDate.setCobolName( "OGP06-REFER-DUE-DATE" );
    _ogp06ReferDueDate.setByteLength( 2 );
    _ogp06Refind = BF.createPackedDecimalBinding( "Ogp06Refind",
      "Ogp06Refind", Short.class, this );
    _ogp06Refind.setCobolName( "OGP06-REFIND" );
    _ogp06Refind.setByteLength( 1 );
    _ogp06Refind.setTotalDigits( 1 );
    _ogp06Refind.setIsSigned( true );
    _ogp06ReferReason = BF.createPackedDecimalBinding( "Ogp06ReferReason",
      "Ogp06ReferReason", Short.class, this );
    _ogp06ReferReason.setCobolName( "OGP06-REFER-REASON" );
    _ogp06ReferReason.setByteLength( 2 );
    _ogp06ReferReason.setTotalDigits( 3 );
    _ogp06ReferReason.setIsSigned( true );
    _ogp06ReferReasonDesc = BF.createStringBinding( "Ogp06ReferReasonDesc",
      "Ogp06ReferReasonDesc", String.class, this );
    _ogp06ReferReasonDesc.setCobolName( "OGP06-REFER-REASON-DESC" );
    _ogp06ReferReasonDesc.setByteLength( 30 );
    _ogp06ReferMonthDay = BF.createPackedDecimalBinding( "Ogp06ReferMonthDay",
      "Ogp06ReferMonthDay", Short.class, this );
    _ogp06ReferMonthDay.setCobolName( "OGP06-REFER-MONTH-DAY" );
    _ogp06ReferMonthDay.setByteLength( 2 );
    _ogp06ReferMonthDay.setTotalDigits( 3 );
    _ogp06ReferMonthDay.setIsSigned( true );
    _ogp06ReferFreq = BF.createStringBinding( "Ogp06ReferFreq",
      "Ogp06ReferFreq", String.class, this );
    _ogp06ReferFreq.setCobolName( "OGP06-REFER-FREQ" );
    _ogp06ReferFreq.setByteLength( 1 );
    _ogp06ReferDayOfWeekWrapperItem = new Ogp06ReferDayOfWeekBinding( "Ogp06ReferDayOfWeekWrapperItem",
      "Ogp06ReferDayOfWeek", this, null );
    _ogp06ReferDayOfWeekWrapper = new Ogp06ReferDayOfWeekWrapperBinding( "Ogp06ReferDayOfWeekWrapper",
      "Ogp06ReferDayOfWeek", this, _ogp06ReferDayOfWeekWrapperItem );
    _ogp06ReferDayOfWeekWrapper.setCobolName( "OGP06-REFER-DAY-OF-WEEK" );
    _ogp06ReferDayOfWeekWrapper.setByteLength( 5 );
    _ogp06ReferDayOfWeekWrapper.setItemByteLength( 1 );
    _ogp06ReferDayOfWeekWrapper.setMinOccurs( 5 );
    _ogp06ReferDayOfWeekWrapper.setMaxOccurs( 5 );

        /* Add children to children list */
    getChildrenList().add( _ogp06FhReferStreamNo );
    getChildrenList().add( _ogp06ReferDueDate );
    getChildrenList().add( _ogp06Refind );
    getChildrenList().add( _ogp06ReferReason );
    getChildrenList().add( _ogp06ReferReasonDesc );
    getChildrenList().add( _ogp06ReferMonthDay );
    getChildrenList().add( _ogp06ReferFreq );
    getChildrenList().add( _ogp06ReferDayOfWeekWrapper );

    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing successful" );
      }
    }

  /** {@inheritDoc} */
  public void createValueObject() throws HostException
    {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
    if( mUnusedValueObject && mValueObject != null )
      {
      mUnusedValueObject = false;
      return;
      }
    mValueObject = mValueObjectFactory.createOgp06ReferralData();
    }

  /** {@inheritDoc} */
  public void setChildrenValues() throws HostException
    {

         /* Make sure there is an associated Value object*/
    if( mValueObject == null )
      {
      createValueObject();
      }
        /* Get Value object property _ogp06FhReferStreamNo */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_ogp06FhReferStreamNo"
        + " value=" + mValueObject.getOgp06FhReferStreamNo() );
      }
    _ogp06FhReferStreamNo.setObjectValue( mValueObject.getOgp06FhReferStreamNo() );
        /* Get Value object property _ogp06ReferDueDate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_ogp06ReferDueDate"
        + " value=" + mValueObject.getOgp06ReferDueDate() );
      }
    _ogp06ReferDueDate.setObjectValue( mValueObject.getOgp06ReferDueDate() );
        /* Get Value object property _ogp06Refind */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_ogp06Refind"
        + " value=" + mValueObject.getOgp06Refind() );
      }
    _ogp06Refind.setObjectValue( mValueObject.getOgp06Refind() );
        /* Get Value object property _ogp06ReferReason */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_ogp06ReferReason"
        + " value=" + mValueObject.getOgp06ReferReason() );
      }
    _ogp06ReferReason.setObjectValue( mValueObject.getOgp06ReferReason() );
        /* Get Value object property _ogp06ReferReasonDesc */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_ogp06ReferReasonDesc"
        + " value=" + mValueObject.getOgp06ReferReasonDesc() );
      }
    _ogp06ReferReasonDesc.setObjectValue( mValueObject.getOgp06ReferReasonDesc() );
        /* Get Value object property _ogp06ReferMonthDay */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_ogp06ReferMonthDay"
        + " value=" + mValueObject.getOgp06ReferMonthDay() );
      }
    _ogp06ReferMonthDay.setObjectValue( mValueObject.getOgp06ReferMonthDay() );
        /* Get Value object property _ogp06ReferFreq */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_ogp06ReferFreq"
        + " value=" + mValueObject.getOgp06ReferFreq() );
      }
    _ogp06ReferFreq.setObjectValue( mValueObject.getOgp06ReferFreq() );
        /* Get Value object property _ogp06ReferDayOfWeekWrapper */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property "
        + "_ogp06ReferDayOfWeekWrapper"
        + " value=" + mValueObject.getOgp06ReferDayOfWeek() );
      }
    _ogp06ReferDayOfWeekWrapper.setObjectValue( mValueObject.getOgp06ReferDayOfWeek() );
    }

  /** {@inheritDoc} */
  public void setPropertyValue( final int index ) throws HostException
    {

    ICobolBinding child = getChildrenList().get( index );

       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
    if( !child.isBound() )
      {
      return;
      }

        /* Set the Value object property value from binding object */
    Object bindingValue = null;
    switch( index )
      {
      case 0:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setOgp06FhReferStreamNo( (Short) bindingValue );
        break;
      case 1:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setOgp06ReferDueDate( (String) bindingValue );
        break;
      case 2:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setOgp06Refind( (Short) bindingValue );
        break;
      case 3:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setOgp06ReferReason( (Short) bindingValue );
        break;
      case 4:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setOgp06ReferReasonDesc( (String) bindingValue );
        break;
      case 5:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setOgp06ReferMonthDay( (Short) bindingValue );
        break;
      case 6:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setOgp06ReferFreq( (String) bindingValue );
        break;
      case 7:
        bindingValue = child.getObjectValue( Ogp06ReferDayOfWeek.class );
        List<Ogp06ReferDayOfWeek> listOgp06ReferDayOfWeekWrapper = cast( bindingValue );
        mValueObject.getOgp06ReferDayOfWeek().clear();
        mValueObject.getOgp06ReferDayOfWeek().addAll( listOgp06ReferDayOfWeekWrapper );
        break;
      default:
        break;
      }
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Setting value of Value object property "
        + child.getJaxbName()
        + " value=" + bindingValue );
      }
    }

  /** {@inheritDoc} */
  public Object getObjectValue(
    final Class<?> type ) throws HostException
    {
    if( type.equals( Ogp06ReferralData.class ) )
      {
      return mValueObject;
      }
    else
      {
      throw new HostException( "Attempt to get binding " + getBindingName()
        + " as an incompatible type " + type );
      }
    }

  /** {@inheritDoc} */
  public void setObjectValue(
    final Object bindingValue ) throws HostException
    {
    if( bindingValue == null )
      {
      mValueObject = null;
      return;
      }
    if( bindingValue.getClass().equals( Ogp06ReferralData.class ) )
      {
      mValueObject = (Ogp06ReferralData) bindingValue;
      }
    else
      {
      throw new HostException( "Attempt to set binding " + getBindingName()
        + " from an incompatible value " + bindingValue );
      }
    }

  /**
   * @return the java object factory for objects creation
   */
  public ObjectFactory getObjectFactory()
    {
    return mValueObjectFactory;
    }

  /**
   * @param valueObjectFactory the java object factory for objects creation
   */
  public void setObjectFactory( final Object valueObjectFactory )
    {
    mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

  /** {@inheritDoc} */
  public boolean isSet()
    {
    return ( mValueObject != null );
    }

  /**
   * @return the bound Value object
   */
  public Ogp06ReferralData getOgp06ReferralData()
    {
    return mValueObject;
    }

  /**
   * The COBOL complex element maximum length in bytes.
   *
   * @return COBOL complex element maximum length in bytes
   */
  public int getByteLength()
    {
    return BYTE_LENGTH;
    }
  }

