package cascading.legstar.cobolcopybook.beans.bean13.bind;

import java.util.List;

import cascading.legstar.cobolcopybook.beans.bean13.Kcp13V05NotificatFreqDetail;
import cascading.legstar.cobolcopybook.beans.bean13.ObjectFactory;
import com.legstar.coxb.CobolBindingFactory;
import com.legstar.coxb.ICobolArrayStringBinding;
import com.legstar.coxb.ICobolBinding;
import com.legstar.coxb.ICobolBindingFactory;
import com.legstar.coxb.ICobolComplexBinding;
import com.legstar.coxb.ICobolPackedDecimalBinding;
import com.legstar.coxb.ICobolStringBinding;
import com.legstar.coxb.common.CComplexBinding;
import com.legstar.coxb.host.HostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * LegStar Binding for Complex element :
 * Kcp13V05NotificatFreqDetail.
 * <p/>
 * This class was generated by LegStar Binding generator.
 */
public class Kcp13V05NotificatFreqDetailBinding extends CComplexBinding
  {

  /**
   * Maximum host bytes size for this complex object.
   */
  private static final int BYTE_LENGTH = 15;
  /**
   * Binding factory.
   */
  private static final ICobolBindingFactory BF = CobolBindingFactory.getBindingFactory();
  /**
   * Static reference to Value object factory to be used as default.
   */
  private static final ObjectFactory JF = new ObjectFactory();
  /**
   * Current Value object factory (Defaults to the static one but can be
   * changed).
   */
  private ObjectFactory mValueObjectFactory = JF;
  /**
   * Logger.
   */
  private final Log _log = LogFactory.getLog( getClass() );
  /**
   * Child bound to value object property Kcp13V05NotificatFreqCode(String).
   */
  public ICobolStringBinding _kcp13V05NotificatFreqCode;
  /**
   * Child bound to value object property Kcp13V05NotificatDayOfMnth(Short).
   */
  public ICobolPackedDecimalBinding _kcp13V05NotificatDayOfMnth;
  /**
   * Child bound to value object property Kcp13V05NotificatDayOfWeek(String).
   */
  public ICobolArrayStringBinding _kcp13V05NotificatDayOfWeek;
  /**
   * Child bound to value object property Kcp13V05NotificatDueDate(String).
   */
  public ICobolStringBinding _kcp13V05NotificatDueDate;
  /**
   * Child bound to value object property Kcp13V05NotificatRecurChg(Short).
   */
  public ICobolPackedDecimalBinding _kcp13V05NotificatRecurChg;
  /**
   * Child bound to value object property Kcp13V05ReasonCode(Short).
   */
  public ICobolPackedDecimalBinding _kcp13V05ReasonCode;
  /**
   * Child bound to value object property Kcp13V05NotificatCommAction(Short).
   */
  public ICobolPackedDecimalBinding _kcp13V05NotificatCommAction;
  /**
   * Child bound to value object property Kcp13V05NotificatCrintActn(Short).
   */
  public ICobolPackedDecimalBinding _kcp13V05NotificatCrintActn;
  /**
   * Child bound to value object property Kcp13V05NotificatDrintActn(Short).
   */
  public ICobolPackedDecimalBinding _kcp13V05NotificatDrintActn;
  /**
   * Value object to which this cobol complex element is bound.
   */
  private Kcp13V05NotificatFreqDetail mValueObject;
  /**
   * Indicates that the associated Value object just came from the constructor
   * and doesn't need to be recreated.
   */
  private boolean mUnusedValueObject = false;

  /**
   * Constructor for a root Complex element without a bound Value object.
   */
  public Kcp13V05NotificatFreqDetailBinding()
    {
    this( null );
    }

  /**
   * Constructor for a root Complex element with a bound Value object.
   *
   * @param valueObject the concrete Value object instance bound to this
   *                    complex element
   */
  public Kcp13V05NotificatFreqDetailBinding( final Kcp13V05NotificatFreqDetail valueObject )
    {
    this( "", "", null, valueObject );
    }

  /**
   * Constructor for a Complex element as a child of another element and
   * an associated Value object.
   *
   * @param bindingName   the identifier for this binding
   * @param fieldName     field name in parent Value object
   * @param valueObject   the concrete Value object instance bound to this
   *                      complex element
   * @param parentBinding a reference to the parent binding
   */
  public Kcp13V05NotificatFreqDetailBinding( final String bindingName, final String fieldName, final ICobolComplexBinding parentBinding, final Kcp13V05NotificatFreqDetail valueObject )
    {

    super( bindingName, fieldName, Kcp13V05NotificatFreqDetail.class, null, parentBinding );
    mValueObject = valueObject;
    if( mValueObject != null )
      {
      mUnusedValueObject = true;
      }
    initChildren();
    setByteLength( BYTE_LENGTH );
    }

  /**
   * Creates a binding property for each child.
   */
  private void initChildren()
    {
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing started" );
      }
        /* Create binding children instances */

    _kcp13V05NotificatFreqCode = BF.createStringBinding( "Kcp13V05NotificatFreqCode", "Kcp13V05NotificatFreqCode", String.class, this );
    _kcp13V05NotificatFreqCode.setCobolName( "KCP13V05-NOTIFICAT-FREQ-CODE" );
    _kcp13V05NotificatFreqCode.setByteLength( 1 );
    _kcp13V05NotificatDayOfMnth = BF.createPackedDecimalBinding( "Kcp13V05NotificatDayOfMnth", "Kcp13V05NotificatDayOfMnth", Short.class, this );
    _kcp13V05NotificatDayOfMnth.setCobolName( "KCP13V05-NOTIFICAT-DAY-OF-MNTH" );
    _kcp13V05NotificatDayOfMnth.setByteLength( 2 );
    _kcp13V05NotificatDayOfMnth.setTotalDigits( 3 );
    _kcp13V05NotificatDayOfMnth.setIsSigned( true );
    _kcp13V05NotificatDayOfWeek = BF.createArrayStringBinding( "Kcp13V05NotificatDayOfWeek", "Kcp13V05NotificatDayOfWeek", String.class, this );
    _kcp13V05NotificatDayOfWeek.setCobolName( "KCP13V05-NOTIFICAT-DAY-OF-WEEK" );
    _kcp13V05NotificatDayOfWeek.setByteLength( 5 );
    _kcp13V05NotificatDayOfWeek.setItemByteLength( 1 );
    _kcp13V05NotificatDayOfWeek.setMinOccurs( 5 );
    _kcp13V05NotificatDayOfWeek.setMaxOccurs( 5 );
    _kcp13V05NotificatDueDate = BF.createStringBinding( "Kcp13V05NotificatDueDate", "Kcp13V05NotificatDueDate", String.class, this );
    _kcp13V05NotificatDueDate.setCobolName( "KCP13V05-NOTIFICAT-DUE-DATE" );
    _kcp13V05NotificatDueDate.setByteLength( 2 );
    _kcp13V05NotificatRecurChg = BF.createPackedDecimalBinding( "Kcp13V05NotificatRecurChg", "Kcp13V05NotificatRecurChg", Short.class, this );
    _kcp13V05NotificatRecurChg.setCobolName( "KCP13V05-NOTIFICAT-RECUR-CHG" );
    _kcp13V05NotificatRecurChg.setByteLength( 1 );
    _kcp13V05NotificatRecurChg.setTotalDigits( 1 );
    _kcp13V05NotificatRecurChg.setIsSigned( true );
    _kcp13V05ReasonCode = BF.createPackedDecimalBinding( "Kcp13V05ReasonCode", "Kcp13V05ReasonCode", Short.class, this );
    _kcp13V05ReasonCode.setCobolName( "KCP13V05-REASON-CODE" );
    _kcp13V05ReasonCode.setByteLength( 1 );
    _kcp13V05ReasonCode.setTotalDigits( 1 );
    _kcp13V05ReasonCode.setIsSigned( true );
    _kcp13V05NotificatCommAction = BF.createPackedDecimalBinding( "Kcp13V05NotificatCommAction", "Kcp13V05NotificatCommAction", Short.class, this );
    _kcp13V05NotificatCommAction.setCobolName( "KCP13V05-NOTIFICAT-COMM-ACTION" );
    _kcp13V05NotificatCommAction.setByteLength( 1 );
    _kcp13V05NotificatCommAction.setTotalDigits( 1 );
    _kcp13V05NotificatCommAction.setIsSigned( true );
    _kcp13V05NotificatCrintActn = BF.createPackedDecimalBinding( "Kcp13V05NotificatCrintActn", "Kcp13V05NotificatCrintActn", Short.class, this );
    _kcp13V05NotificatCrintActn.setCobolName( "KCP13V05-NOTIFICAT-CRINT-ACTN" );
    _kcp13V05NotificatCrintActn.setByteLength( 1 );
    _kcp13V05NotificatCrintActn.setTotalDigits( 1 );
    _kcp13V05NotificatCrintActn.setIsSigned( true );
    _kcp13V05NotificatDrintActn = BF.createPackedDecimalBinding( "Kcp13V05NotificatDrintActn", "Kcp13V05NotificatDrintActn", Short.class, this );
    _kcp13V05NotificatDrintActn.setCobolName( "KCP13V05-NOTIFICAT-DRINT-ACTN" );
    _kcp13V05NotificatDrintActn.setByteLength( 1 );
    _kcp13V05NotificatDrintActn.setTotalDigits( 1 );
    _kcp13V05NotificatDrintActn.setIsSigned( true );

        /* Add children to children list */
    getChildrenList().add( _kcp13V05NotificatFreqCode );
    getChildrenList().add( _kcp13V05NotificatDayOfMnth );
    getChildrenList().add( _kcp13V05NotificatDayOfWeek );
    getChildrenList().add( _kcp13V05NotificatDueDate );
    getChildrenList().add( _kcp13V05NotificatRecurChg );
    getChildrenList().add( _kcp13V05ReasonCode );
    getChildrenList().add( _kcp13V05NotificatCommAction );
    getChildrenList().add( _kcp13V05NotificatCrintActn );
    getChildrenList().add( _kcp13V05NotificatDrintActn );

    if( _log.isDebugEnabled() )
      {
      _log.debug( "Initializing successful" );
      }
    }

  /**
   * {@inheritDoc}
   */
  public void createValueObject() throws HostException
    {
        /* Since this complex binding has a constructor that takes a
         * Value object, we might already have a Value object that
         * was not used yet. */
    if( mUnusedValueObject && mValueObject != null )
      {
      mUnusedValueObject = false;
      return;
      }
    mValueObject = mValueObjectFactory.createKcp13V05NotificatFreqDetail();
    }

  /**
   * {@inheritDoc}
   */
  public void setChildrenValues() throws HostException
    {

         /* Make sure there is an associated Value object*/
    if( mValueObject == null )
      {
      createValueObject();
      }
        /* Get Value object property _kcp13V05NotificatFreqCode */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp13V05NotificatFreqCode" + " value=" + mValueObject.getKcp13V05NotificatFreqCode() );
      }
    _kcp13V05NotificatFreqCode.setObjectValue( mValueObject.getKcp13V05NotificatFreqCode() );
        /* Get Value object property _kcp13V05NotificatDayOfMnth */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp13V05NotificatDayOfMnth" + " value=" + mValueObject.getKcp13V05NotificatDayOfMnth() );
      }
    _kcp13V05NotificatDayOfMnth.setObjectValue( mValueObject.getKcp13V05NotificatDayOfMnth() );
        /* Get Value object property _kcp13V05NotificatDayOfWeek */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp13V05NotificatDayOfWeek" + " value=" + mValueObject.getKcp13V05NotificatDayOfWeek() );
      }
    _kcp13V05NotificatDayOfWeek.setObjectValue( mValueObject.getKcp13V05NotificatDayOfWeek() );
        /* Get Value object property _kcp13V05NotificatDueDate */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp13V05NotificatDueDate" + " value=" + mValueObject.getKcp13V05NotificatDueDate() );
      }
    _kcp13V05NotificatDueDate.setObjectValue( mValueObject.getKcp13V05NotificatDueDate() );
        /* Get Value object property _kcp13V05NotificatRecurChg */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp13V05NotificatRecurChg" + " value=" + mValueObject.getKcp13V05NotificatRecurChg() );
      }
    _kcp13V05NotificatRecurChg.setObjectValue( mValueObject.getKcp13V05NotificatRecurChg() );
        /* Get Value object property _kcp13V05ReasonCode */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp13V05ReasonCode" + " value=" + mValueObject.getKcp13V05ReasonCode() );
      }
    _kcp13V05ReasonCode.setObjectValue( mValueObject.getKcp13V05ReasonCode() );
        /* Get Value object property _kcp13V05NotificatCommAction */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp13V05NotificatCommAction" + " value=" + mValueObject.getKcp13V05NotificatCommAction() );
      }
    _kcp13V05NotificatCommAction.setObjectValue( mValueObject.getKcp13V05NotificatCommAction() );
        /* Get Value object property _kcp13V05NotificatCrintActn */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp13V05NotificatCrintActn" + " value=" + mValueObject.getKcp13V05NotificatCrintActn() );
      }
    _kcp13V05NotificatCrintActn.setObjectValue( mValueObject.getKcp13V05NotificatCrintActn() );
        /* Get Value object property _kcp13V05NotificatDrintActn */
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Getting value from Value object property " + "_kcp13V05NotificatDrintActn" + " value=" + mValueObject.getKcp13V05NotificatDrintActn() );
      }
    _kcp13V05NotificatDrintActn.setObjectValue( mValueObject.getKcp13V05NotificatDrintActn() );
    }

  /**
   * {@inheritDoc}
   */
  public void setPropertyValue( final int index ) throws HostException
    {

    ICobolBinding child = getChildrenList().get( index );

       /* Children that are not bound to a value object are ignored.
        * This includes Choices and dynamically generated counters
        * for instance.  */
    if( !child.isBound() )
      {
      return;
      }

        /* Set the Value object property value from binding object */
    Object bindingValue = null;
    switch( index )
      {
      case 0:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp13V05NotificatFreqCode( (String) bindingValue );
        break;
      case 1:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp13V05NotificatDayOfMnth( (Short) bindingValue );
        break;
      case 2:
        bindingValue = child.getObjectValue( String.class );
        List<String> listKcp13V05NotificatDayOfWeek = cast( bindingValue );
        mValueObject.getKcp13V05NotificatDayOfWeek().clear();
        mValueObject.getKcp13V05NotificatDayOfWeek().addAll( listKcp13V05NotificatDayOfWeek );
        break;
      case 3:
        bindingValue = child.getObjectValue( String.class );
        mValueObject.setKcp13V05NotificatDueDate( (String) bindingValue );
        break;
      case 4:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp13V05NotificatRecurChg( (Short) bindingValue );
        break;
      case 5:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp13V05ReasonCode( (Short) bindingValue );
        break;
      case 6:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp13V05NotificatCommAction( (Short) bindingValue );
        break;
      case 7:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp13V05NotificatCrintActn( (Short) bindingValue );
        break;
      case 8:
        bindingValue = child.getObjectValue( Short.class );
        mValueObject.setKcp13V05NotificatDrintActn( (Short) bindingValue );
        break;
      default:
        break;
      }
    if( _log.isDebugEnabled() )
      {
      _log.debug( "Setting value of Value object property " + child.getJaxbName() + " value=" + bindingValue );
      }
    }

  /**
   * {@inheritDoc}
   */
  public Object getObjectValue( final Class<?> type ) throws HostException
    {
    if( type.equals( Kcp13V05NotificatFreqDetail.class ) )
      {
      return mValueObject;
      }
    else
      {
      throw new HostException( "Attempt to get binding " + getBindingName() + " as an incompatible type " + type );
      }
    }

  /**
   * {@inheritDoc}
   */
  public void setObjectValue( final Object bindingValue ) throws HostException
    {
    if( bindingValue == null )
      {
      mValueObject = null;
      return;
      }
    if( bindingValue.getClass().equals( Kcp13V05NotificatFreqDetail.class ) )
      {
      mValueObject = (Kcp13V05NotificatFreqDetail) bindingValue;
      }
    else
      {
      throw new HostException( "Attempt to set binding " + getBindingName() + " from an incompatible value " + bindingValue );
      }
    }

  /**
   * @return the java object factory for objects creation
   */
  public ObjectFactory getObjectFactory()
    {
    return mValueObjectFactory;
    }

  /**
   * @param valueObjectFactory the java object factory for objects creation
   */
  public void setObjectFactory( final Object valueObjectFactory )
    {
    mValueObjectFactory = (ObjectFactory) valueObjectFactory;
    }

  /**
   * {@inheritDoc}
   */
  public boolean isSet()
    {
    return ( mValueObject != null );
    }

  /**
   * @return the bound Value object
   */
  public Kcp13V05NotificatFreqDetail getKcp13V05NotificatFreqDetail()
    {
    return mValueObject;
    }

  /**
   * The COBOL complex element maximum length in bytes.
   *
   * @return COBOL complex element maximum length in bytes
   */
  public int getByteLength()
    {
    return BYTE_LENGTH;
    }
  }

